// <auto-generated />
using System;
using MedicalCenters.Persistence.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenters.Persistence.Migrations.IdentityDB
{
    [DbContext(typeof(IdentityDBContext))]
    [Migration("20240914081045_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2209),
                            CreatedBy = 1L,
                            Description = "افزودن مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2279),
                            CreatedBy = 1L,
                            Description = "ویرایش مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2311),
                            CreatedBy = 1L,
                            Description = "حذف مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2341),
                            CreatedBy = 1L,
                            Description = "مشاهده اطلاعات مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2369),
                            CreatedBy = 1L,
                            Description = "مشاهده اطلاعات تمامی مراکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2405),
                            CreatedBy = 1L,
                            Description = "افزودن بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2435),
                            CreatedBy = 1L,
                            Description = "ویرایش بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2462),
                            CreatedBy = 1L,
                            Description = "حذف بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2492),
                            CreatedBy = 1L,
                            Description = "مشاهده اطلاعات بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2526),
                            CreatedBy = 1L,
                            Description = "مشاهده اطلاعات تمامی بخش های مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2556),
                            CreatedBy = 1L,
                            Description = "افزودن دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2584),
                            CreatedBy = 1L,
                            Description = "ویرایش دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2729),
                            CreatedBy = 1L,
                            Description = "حذف دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2764),
                            CreatedBy = 1L,
                            Description = "مشاهده دارو ها",
                            Name = "p"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2794),
                            CreatedBy = 1L,
                            Description = "مشاهده دارو های یک نوع",
                            Name = "p"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2821),
                            CreatedBy = 1L,
                            Description = "افزودن پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2847),
                            CreatedBy = 1L,
                            Description = "ویرایش پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2877),
                            CreatedBy = 1L,
                            Description = "حذف پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2903),
                            CreatedBy = 1L,
                            Description = "مشاهده اطلاعات پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2929),
                            CreatedBy = 1L,
                            Description = "افزودن بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2957),
                            CreatedBy = 1L,
                            Description = "ویرایش بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(2986),
                            CreatedBy = 1L,
                            Description = "حذف بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 482, DateTimeKind.Local).AddTicks(3018),
                            CreatedBy = 1L,
                            Description = "مشاهده اطلاعات بیمار",
                            Name = "p"
                        });
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", b =>
                {
                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionGroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionGroup_User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionId", "PermissionGroupId");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permission_PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_User", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission_User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("HashAlgorithmType")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PeaperType")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 9, 14, 11, 40, 45, 561, DateTimeKind.Local).AddTicks(9962),
                            CreatedBy = 1L,
                            HashAlgorithmType = 0,
                            HashedPassword = new byte[] { 208, 124, 85, 149, 208, 25, 86, 42, 226, 238, 48, 253, 149, 44, 74, 108, 195, 9, 38, 111, 74, 20, 94, 48, 238, 2, 205, 149, 155, 254, 114, 199, 139, 112, 177, 112, 13, 138, 26, 169, 223, 187, 25, 43, 173, 4, 115, 94, 75, 206, 117, 71, 58, 42, 143, 237, 147, 98, 116, 218, 153, 32, 204, 72 },
                            Name = "ادمین",
                            PeaperType = 0,
                            Salt = new byte[] { 169, 141, 210, 207, 115, 64, 48, 47, 74, 233, 163, 21, 37, 113, 249, 50, 15, 209, 174, 16, 53, 101, 44, 108, 3, 193, 181, 205, 91, 182, 108, 161, 4, 196, 179, 192, 233, 112, 177, 57, 149, 31, 120, 81, 162, 251, 123, 102, 207, 241, 174, 138, 50, 248, 210, 217, 203, 132, 157, 103, 242, 198, 138, 160 },
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_User", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
