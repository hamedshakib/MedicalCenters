// <auto-generated />
using System;
using MedicalCenters.Persistence.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenters.Persistence.Migrations.IdentityDB
{
    [DbContext(typeof(IdentityDBContext))]
    partial class IdentityDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9139),
                            Description = "افزودن مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9180),
                            Description = "ویرایش مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9197),
                            Description = "حذف مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9215),
                            Description = "مشاهده اطلاعات مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9231),
                            Description = "مشاهده اطلاعات تمامی مراکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9250),
                            Description = "افزودن بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9266),
                            Description = "ویرایش بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9332),
                            Description = "حذف بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9353),
                            Description = "مشاهده اطلاعات بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9372),
                            Description = "مشاهده اطلاعات تمامی بخش های مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9387),
                            Description = "افزودن دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9403),
                            Description = "ویرایش دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9418),
                            Description = "حذف دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9437),
                            Description = "مشاهده دارو ها",
                            Name = "p"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9453),
                            Description = "مشاهده دارو های یک نوع",
                            Name = "p"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9468),
                            Description = "افزودن پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9484),
                            Description = "ویرایش پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9500),
                            Description = "حذف پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9515),
                            Description = "مشاهده اطلاعات پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9530),
                            Description = "افزودن بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9545),
                            Description = "ویرایش بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9560),
                            Description = "حذف بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 508, DateTimeKind.Local).AddTicks(9576),
                            Description = "مشاهده اطلاعات بیمار",
                            Name = "p"
                        });
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", b =>
                {
                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionGroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionGroup_User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId", "PermissionGroupId");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permission_PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_User", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission_User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("HashAlgorithmType")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PeaperType")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 6, 12, 11, 56, 39, 575, DateTimeKind.Local).AddTicks(4548),
                            HashAlgorithmType = 0,
                            HashedPassword = new byte[] { 245, 190, 172, 39, 191, 191, 56, 83, 157, 17, 77, 25, 213, 64, 125, 47, 134, 184, 179, 145, 30, 123, 101, 205, 97, 216, 65, 225, 188, 44, 68, 20, 73, 70, 23, 102, 200, 151, 245, 110, 107, 90, 65, 6, 202, 62, 253, 243, 65, 39, 174, 89, 9, 124, 20, 146, 127, 125, 82, 220, 1, 37, 82, 215 },
                            Name = "ادمین",
                            PeaperType = 0,
                            Salt = new byte[] { 6, 244, 125, 25, 212, 149, 89, 24, 225, 129, 169, 27, 78, 33, 174, 233, 170, 124, 193, 216, 24, 157, 79, 56, 25, 220, 25, 105, 7, 225, 207, 147, 230, 201, 244, 155, 53, 56, 14, 172, 227, 187, 22, 129, 83, 24, 223, 30, 89, 186, 251, 192, 150, 140, 201, 180, 215, 36, 61, 145, 50, 249, 186, 37 },
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_User", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
