// <auto-generated />
using System;
using MedicalCenters.Persistence.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenters.Persistence.Migrations.IdentityDB
{
    [DbContext(typeof(IdentityDBContext))]
    [Migration("20240802103313_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1074),
                            Description = "افزودن مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1114),
                            Description = "ویرایش مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1131),
                            Description = "حذف مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1146),
                            Description = "مشاهده اطلاعات مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1162),
                            Description = "مشاهده اطلاعات تمامی مراکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1180),
                            Description = "افزودن بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1197),
                            Description = "ویرایش بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1212),
                            Description = "حذف بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1269),
                            Description = "مشاهده اطلاعات بخش درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1289),
                            Description = "مشاهده اطلاعات تمامی بخش های مرکز درمانی",
                            Name = "p"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1304),
                            Description = "افزودن دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1319),
                            Description = "ویرایش دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1334),
                            Description = "حذف دارو",
                            Name = "p"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1350),
                            Description = "مشاهده دارو ها",
                            Name = "p"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1366),
                            Description = "مشاهده دارو های یک نوع",
                            Name = "p"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1381),
                            Description = "افزودن پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1396),
                            Description = "ویرایش پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1412),
                            Description = "حذف پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1426),
                            Description = "مشاهده اطلاعات پزشک",
                            Name = "p"
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1440),
                            Description = "افزودن بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1453),
                            Description = "ویرایش بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1467),
                            Description = "حذف بیمار",
                            Name = "p"
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 12, 950, DateTimeKind.Local).AddTicks(1482),
                            Description = "مشاهده اطلاعات بیمار",
                            Name = "p"
                        });
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", b =>
                {
                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionGroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionGroup_User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId", "PermissionGroupId");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permission_PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_User", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission_User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("HashAlgorithmType")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PeaperType")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            DateTimeCreated = new DateTime(2024, 8, 2, 14, 3, 13, 18, DateTimeKind.Local).AddTicks(5679),
                            HashAlgorithmType = 0,
                            HashedPassword = new byte[] { 26, 41, 173, 218, 123, 99, 212, 12, 234, 38, 2, 41, 140, 17, 231, 95, 218, 179, 126, 159, 93, 195, 237, 184, 6, 201, 252, 94, 240, 116, 127, 203, 145, 79, 98, 156, 112, 105, 85, 180, 17, 196, 149, 219, 213, 193, 155, 204, 136, 148, 199, 127, 196, 120, 128, 255, 51, 105, 227, 70, 135, 119, 171, 143 },
                            Name = "ادمین",
                            PeaperType = 0,
                            Salt = new byte[] { 153, 115, 209, 27, 125, 157, 19, 148, 45, 59, 204, 221, 141, 11, 13, 32, 25, 85, 222, 208, 236, 243, 185, 21, 26, 181, 189, 239, 77, 101, 240, 213, 54, 67, 10, 6, 223, 8, 183, 210, 18, 98, 60, 28, 185, 144, 171, 36, 202, 104, 94, 4, 20, 59, 187, 101, 142, 225, 55, 15, 34, 149, 108, 107 },
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("MedicalCenters.Identity.Models.Domains.Permission_User", b =>
                {
                    b.HasOne("MedicalCenters.Identity.Models.Domains.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenters.Identity.Models.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
