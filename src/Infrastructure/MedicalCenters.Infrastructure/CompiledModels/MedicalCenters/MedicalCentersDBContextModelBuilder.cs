// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MedicalCenters.Persistence.CompiledModels.MedicalCenters
{
    public partial class MedicalCentersDBContextModel
    {
        partial void Initialize()
        {
            var allergy = AllergyEntityType.Create(this);
            var allergy_MedicineType = Allergy_MedicineTypeEntityType.Create(this);
            var allergy_Patient = Allergy_PatientEntityType.Create(this);
            var doctor_Operation = Doctor_OperationEntityType.Create(this);
            var doctor_Specialty = Doctor_SpecialtyEntityType.Create(this);
            var doctor_Visit = Doctor_VisitEntityType.Create(this);
            var medicine_Operation = Medicine_OperationEntityType.Create(this);
            var medicine_PatientHistory = Medicine_PatientHistoryEntityType.Create(this);
            var medicalCenter = MedicalCenterEntityType.Create(this);
            var medicalCenterType = MedicalCenterTypeEntityType.Create(this);
            var medicalWardType = MedicalWardTypeEntityType.Create(this);
            var medicalUnit = MedicalUnitEntityType.Create(this);
            var medicalWard = MedicalWardEntityType.Create(this);
            var medicine = MedicineEntityType.Create(this);
            var medicineType = MedicineTypeEntityType.Create(this);
            var operation = OperationEntityType.Create(this);
            var operationType = OperationTypeEntityType.Create(this);
            var patientHistory = PatientHistoryEntityType.Create(this);
            var patient = PatientEntityType.Create(this);
            var personnel = PersonnelEntityType.Create(this);
            var reservation = ReservationEntityType.Create(this);
            var shift = ShiftEntityType.Create(this);
            var shiftPlan = ShiftPlanEntityType.Create(this);
            var specialty = SpecialtyEntityType.Create(this);
            var specialtyGroup = SpecialtyGroupEntityType.Create(this);
            var visit = VisitEntityType.Create(this);
            var doctor = DoctorEntityType.Create(this, personnel);
            var nurse = NurseEntityType.Create(this, personnel);

            Allergy_MedicineTypeEntityType.CreateForeignKey1(allergy_MedicineType, allergy);
            Allergy_MedicineTypeEntityType.CreateForeignKey2(allergy_MedicineType, medicineType);
            Allergy_PatientEntityType.CreateForeignKey1(allergy_Patient, allergy);
            Allergy_PatientEntityType.CreateForeignKey2(allergy_Patient, patient);
            Doctor_OperationEntityType.CreateForeignKey1(doctor_Operation, doctor);
            Doctor_OperationEntityType.CreateForeignKey2(doctor_Operation, operation);
            Doctor_SpecialtyEntityType.CreateForeignKey1(doctor_Specialty, doctor);
            Doctor_SpecialtyEntityType.CreateForeignKey2(doctor_Specialty, specialty);
            Doctor_VisitEntityType.CreateForeignKey1(doctor_Visit, doctor);
            Doctor_VisitEntityType.CreateForeignKey2(doctor_Visit, visit);
            Medicine_OperationEntityType.CreateForeignKey1(medicine_Operation, medicine);
            Medicine_OperationEntityType.CreateForeignKey2(medicine_Operation, operation);
            Medicine_PatientHistoryEntityType.CreateForeignKey1(medicine_PatientHistory, medicine);
            Medicine_PatientHistoryEntityType.CreateForeignKey2(medicine_PatientHistory, patientHistory);
            MedicalCenterEntityType.CreateForeignKey1(medicalCenter, medicalCenterType);
            MedicalWardEntityType.CreateForeignKey1(medicalWard, medicalCenter);
            MedicalWardEntityType.CreateForeignKey2(medicalWard, medicalWardType);
            MedicineEntityType.CreateForeignKey1(medicine, medicineType);
            OperationEntityType.CreateForeignKey1(operation, operationType);
            PatientHistoryEntityType.CreateForeignKey1(patientHistory, doctor);
            PatientHistoryEntityType.CreateForeignKey2(patientHistory, patient);
            ReservationEntityType.CreateForeignKey1(reservation, patient);
            ShiftEntityType.CreateForeignKey1(shift, personnel);
            ShiftEntityType.CreateForeignKey2(shift, shiftPlan);
            ShiftEntityType.CreateForeignKey3(shift, medicalUnit);
            ShiftPlanEntityType.CreateForeignKey1(shiftPlan, medicalUnit);
            ShiftPlanEntityType.CreateForeignKey2(shiftPlan, personnel);
            SpecialtyEntityType.CreateForeignKey1(specialty, specialtyGroup);
            VisitEntityType.CreateForeignKey1(visit, patient);
            VisitEntityType.CreateForeignKey2(visit, reservation);
            DoctorEntityType.CreateForeignKey1(doctor, personnel);
            NurseEntityType.CreateForeignKey1(nurse, personnel);

            AllergyEntityType.CreateAnnotations(allergy);
            Allergy_MedicineTypeEntityType.CreateAnnotations(allergy_MedicineType);
            Allergy_PatientEntityType.CreateAnnotations(allergy_Patient);
            Doctor_OperationEntityType.CreateAnnotations(doctor_Operation);
            Doctor_SpecialtyEntityType.CreateAnnotations(doctor_Specialty);
            Doctor_VisitEntityType.CreateAnnotations(doctor_Visit);
            Medicine_OperationEntityType.CreateAnnotations(medicine_Operation);
            Medicine_PatientHistoryEntityType.CreateAnnotations(medicine_PatientHistory);
            MedicalCenterEntityType.CreateAnnotations(medicalCenter);
            MedicalCenterTypeEntityType.CreateAnnotations(medicalCenterType);
            MedicalWardTypeEntityType.CreateAnnotations(medicalWardType);
            MedicalUnitEntityType.CreateAnnotations(medicalUnit);
            MedicalWardEntityType.CreateAnnotations(medicalWard);
            MedicineEntityType.CreateAnnotations(medicine);
            MedicineTypeEntityType.CreateAnnotations(medicineType);
            OperationEntityType.CreateAnnotations(operation);
            OperationTypeEntityType.CreateAnnotations(operationType);
            PatientHistoryEntityType.CreateAnnotations(patientHistory);
            PatientEntityType.CreateAnnotations(patient);
            PersonnelEntityType.CreateAnnotations(personnel);
            ReservationEntityType.CreateAnnotations(reservation);
            ShiftEntityType.CreateAnnotations(shift);
            ShiftPlanEntityType.CreateAnnotations(shiftPlan);
            SpecialtyEntityType.CreateAnnotations(specialty);
            SpecialtyGroupEntityType.CreateAnnotations(specialtyGroup);
            VisitEntityType.CreateAnnotations(visit);
            DoctorEntityType.CreateAnnotations(doctor);
            NurseEntityType.CreateAnnotations(nurse);

            AddAnnotation("ProductVersion", "8.0.6");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var allergy = FindEntityType("MedicalCenters.Domain.Entities.Allergy")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            allergy.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var medicalCentersDomainEntitiesAllergyTableBase = new TableBase("MedicalCenters.Domain.Entities.Allergy", null, relationalModel);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesAllergyTableBase);
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var dateTimeCreatedColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesAllergyTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase);
            var dateTimeModifiedColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesAllergyTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesAllergyTableBase);
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesAllergyTableBase);
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("Id", idColumnBase);
            var modifiedByColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesAllergyTableBase);
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", medicalCentersDomainEntitiesAllergyTableBase);
            medicalCentersDomainEntitiesAllergyTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Allergy", medicalCentersDomainEntitiesAllergyTableBase);
            var medicalCentersDomainEntitiesAllergyMappingBase = new TableMappingBase<ColumnMappingBase>(allergy, medicalCentersDomainEntitiesAllergyTableBase, true);
            medicalCentersDomainEntitiesAllergyTableBase.AddTypeMapping(medicalCentersDomainEntitiesAllergyMappingBase, false);
            defaultTableMappings.Add(medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, allergy.FindProperty("Id")!, medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, allergy.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase, allergy.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase, allergy.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, allergy.FindProperty("Description")!, medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase, allergy.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesAllergyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, allergy.FindProperty("Name")!, medicalCentersDomainEntitiesAllergyMappingBase);

            var tableMappings = new List<TableMapping>();
            allergy.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var allergyTable = new Table("Allergy", null, relationalModel);
            var idColumn = new Column("Id", "int", allergyTable);
            allergyTable.Columns.Add("Id", idColumn);
            var createdByColumn = new Column("CreatedBy", "bigint", allergyTable);
            allergyTable.Columns.Add("CreatedBy", createdByColumn);
            var dateTimeCreatedColumn = new Column("DateTimeCreated", "datetime2", allergyTable)
            {
                IsNullable = true
            };
            allergyTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn);
            var dateTimeModifiedColumn = new Column("DateTimeModified", "datetime2", allergyTable)
            {
                IsNullable = true
            };
            allergyTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn);
            var descriptionColumn = new Column("Description", "nvarchar(1000)", allergyTable);
            allergyTable.Columns.Add("Description", descriptionColumn);
            var modifiedByColumn = new Column("ModifiedBy", "bigint", allergyTable);
            allergyTable.Columns.Add("ModifiedBy", modifiedByColumn);
            var nameColumn = new Column("Name", "nvarchar(100)", allergyTable);
            allergyTable.Columns.Add("Name", nameColumn);
            var pK_Allergy = new UniqueConstraint("PK_Allergy", allergyTable, new[] { idColumn });
            allergyTable.PrimaryKey = pK_Allergy;
            var pK_AllergyUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Allergy",
                new[] { "Id" });
            pK_Allergy.MappedKeys.Add(pK_AllergyUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AllergyUc).Add(pK_Allergy);
            allergyTable.UniqueConstraints.Add("PK_Allergy", pK_Allergy);
            relationalModel.Tables.Add(("Allergy", null), allergyTable);
            var allergyTableMapping = new TableMapping(allergy, allergyTable, true);
            allergyTable.AddTypeMapping(allergyTableMapping, false);
            tableMappings.Add(allergyTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, allergy.FindProperty("Id")!, allergyTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, allergy.FindProperty("CreatedBy")!, allergyTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn, allergy.FindProperty("DateTimeCreated")!, allergyTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn, allergy.FindProperty("DateTimeModified")!, allergyTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, allergy.FindProperty("Description")!, allergyTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn, allergy.FindProperty("ModifiedBy")!, allergyTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, allergy.FindProperty("Name")!, allergyTableMapping);

            var allergy_MedicineType = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            allergy_MedicineType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType", null, relationalModel);
            var allergyIdColumnBase = new ColumnBase<ColumnMappingBase>("AllergyId", "int", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase.Columns.Add("AllergyId", allergyIdColumnBase);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var dateTimeCreatedColumnBase0 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase0);
            var medicineTypeIdColumnBase = new ColumnBase<ColumnMappingBase>("MedicineTypeId", "int", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase.Columns.Add("MedicineTypeId", medicineTypeIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase = new TableMappingBase<ColumnMappingBase>(allergy_MedicineType, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase, false);
            defaultTableMappings0.Add(medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allergyIdColumnBase, allergy_MedicineType.FindProperty("AllergyId")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)medicineTypeIdColumnBase, allergy_MedicineType.FindProperty("MedicineTypeId")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, allergy_MedicineType.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase0, allergy_MedicineType.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_MedicineTypeMappingBase);

            var tableMappings0 = new List<TableMapping>();
            allergy_MedicineType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var allergy_MedicineTypeTable = new Table("Allergy_MedicineType", null, relationalModel);
            var allergyIdColumn = new Column("AllergyId", "int", allergy_MedicineTypeTable);
            allergy_MedicineTypeTable.Columns.Add("AllergyId", allergyIdColumn);
            var medicineTypeIdColumn = new Column("MedicineTypeId", "int", allergy_MedicineTypeTable);
            allergy_MedicineTypeTable.Columns.Add("MedicineTypeId", medicineTypeIdColumn);
            var createdByColumn0 = new Column("CreatedBy", "bigint", allergy_MedicineTypeTable);
            allergy_MedicineTypeTable.Columns.Add("CreatedBy", createdByColumn0);
            var dateTimeCreatedColumn0 = new Column("DateTimeCreated", "datetime2", allergy_MedicineTypeTable)
            {
                IsNullable = true
            };
            allergy_MedicineTypeTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn0);
            var pK_Allergy_MedicineType = new UniqueConstraint("PK_Allergy_MedicineType", allergy_MedicineTypeTable, new[] { allergyIdColumn, medicineTypeIdColumn });
            allergy_MedicineTypeTable.PrimaryKey = pK_Allergy_MedicineType;
            var pK_Allergy_MedicineTypeUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType",
                new[] { "AllergyId", "MedicineTypeId" });
            pK_Allergy_MedicineType.MappedKeys.Add(pK_Allergy_MedicineTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Allergy_MedicineTypeUc).Add(pK_Allergy_MedicineType);
            allergy_MedicineTypeTable.UniqueConstraints.Add("PK_Allergy_MedicineType", pK_Allergy_MedicineType);
            var iX_Allergy_MedicineType_MedicineTypeId = new TableIndex(
            "IX_Allergy_MedicineType_MedicineTypeId", allergy_MedicineTypeTable, new[] { medicineTypeIdColumn }, false);
            var iX_Allergy_MedicineType_MedicineTypeIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType",
                new[] { "MedicineTypeId" });
            iX_Allergy_MedicineType_MedicineTypeId.MappedIndexes.Add(iX_Allergy_MedicineType_MedicineTypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Allergy_MedicineType_MedicineTypeIdIx).Add(iX_Allergy_MedicineType_MedicineTypeId);
            allergy_MedicineTypeTable.Indexes.Add("IX_Allergy_MedicineType_MedicineTypeId", iX_Allergy_MedicineType_MedicineTypeId);
            relationalModel.Tables.Add(("Allergy_MedicineType", null), allergy_MedicineTypeTable);
            var allergy_MedicineTypeTableMapping = new TableMapping(allergy_MedicineType, allergy_MedicineTypeTable, true);
            allergy_MedicineTypeTable.AddTypeMapping(allergy_MedicineTypeTableMapping, false);
            tableMappings0.Add(allergy_MedicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(allergyIdColumn, allergy_MedicineType.FindProperty("AllergyId")!, allergy_MedicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(medicineTypeIdColumn, allergy_MedicineType.FindProperty("MedicineTypeId")!, allergy_MedicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, allergy_MedicineType.FindProperty("CreatedBy")!, allergy_MedicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn0, allergy_MedicineType.FindProperty("DateTimeCreated")!, allergy_MedicineTypeTableMapping);

            var allergy_Patient = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            allergy_Patient.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient", null, relationalModel);
            var allergyIdColumnBase0 = new ColumnBase<ColumnMappingBase>("AllergyId", "int", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase.Columns.Add("AllergyId", allergyIdColumnBase0);
            var createdByColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase.Columns.Add("CreatedBy", createdByColumnBase1);
            var dateTimeCreatedColumnBase1 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase1);
            var patientIdColumnBase = new ColumnBase<ColumnMappingBase>("PatientId", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase.Columns.Add("PatientId", patientIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient", medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase = new TableMappingBase<ColumnMappingBase>(allergy_Patient, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase, false);
            defaultTableMappings1.Add(medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allergyIdColumnBase0, allergy_Patient.FindProperty("AllergyId")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)patientIdColumnBase, allergy_Patient.FindProperty("PatientId")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase1, allergy_Patient.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase1, allergy_Patient.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesAllergy_PatientMappingBase);

            var tableMappings1 = new List<TableMapping>();
            allergy_Patient.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var allergy_PatientTable = new Table("Allergy_Patient", null, relationalModel);
            var allergyIdColumn0 = new Column("AllergyId", "int", allergy_PatientTable);
            allergy_PatientTable.Columns.Add("AllergyId", allergyIdColumn0);
            var patientIdColumn = new Column("PatientId", "bigint", allergy_PatientTable);
            allergy_PatientTable.Columns.Add("PatientId", patientIdColumn);
            var createdByColumn1 = new Column("CreatedBy", "bigint", allergy_PatientTable);
            allergy_PatientTable.Columns.Add("CreatedBy", createdByColumn1);
            var dateTimeCreatedColumn1 = new Column("DateTimeCreated", "datetime2", allergy_PatientTable)
            {
                IsNullable = true
            };
            allergy_PatientTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn1);
            var pK_Allergy_Patient = new UniqueConstraint("PK_Allergy_Patient", allergy_PatientTable, new[] { allergyIdColumn0, patientIdColumn });
            allergy_PatientTable.PrimaryKey = pK_Allergy_Patient;
            var pK_Allergy_PatientUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient",
                new[] { "AllergyId", "PatientId" });
            pK_Allergy_Patient.MappedKeys.Add(pK_Allergy_PatientUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Allergy_PatientUc).Add(pK_Allergy_Patient);
            allergy_PatientTable.UniqueConstraints.Add("PK_Allergy_Patient", pK_Allergy_Patient);
            var iX_Allergy_Patient_PatientId = new TableIndex(
            "IX_Allergy_Patient_PatientId", allergy_PatientTable, new[] { patientIdColumn }, false);
            var iX_Allergy_Patient_PatientIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient",
                new[] { "PatientId" });
            iX_Allergy_Patient_PatientId.MappedIndexes.Add(iX_Allergy_Patient_PatientIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Allergy_Patient_PatientIdIx).Add(iX_Allergy_Patient_PatientId);
            allergy_PatientTable.Indexes.Add("IX_Allergy_Patient_PatientId", iX_Allergy_Patient_PatientId);
            relationalModel.Tables.Add(("Allergy_Patient", null), allergy_PatientTable);
            var allergy_PatientTableMapping = new TableMapping(allergy_Patient, allergy_PatientTable, true);
            allergy_PatientTable.AddTypeMapping(allergy_PatientTableMapping, false);
            tableMappings1.Add(allergy_PatientTableMapping);
            RelationalModel.CreateColumnMapping(allergyIdColumn0, allergy_Patient.FindProperty("AllergyId")!, allergy_PatientTableMapping);
            RelationalModel.CreateColumnMapping(patientIdColumn, allergy_Patient.FindProperty("PatientId")!, allergy_PatientTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn1, allergy_Patient.FindProperty("CreatedBy")!, allergy_PatientTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn1, allergy_Patient.FindProperty("DateTimeCreated")!, allergy_PatientTableMapping);

            var doctor_Operation = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            doctor_Operation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation", null, relationalModel);
            var createdByColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase.Columns.Add("CreatedBy", createdByColumnBase2);
            var dateTimeCreatedColumnBase2 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase2);
            var doctorIdColumnBase = new ColumnBase<ColumnMappingBase>("DoctorId", "int", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase.Columns.Add("DoctorId", doctorIdColumnBase);
            var operationIdColumnBase = new ColumnBase<ColumnMappingBase>("OperationId", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase.Columns.Add("OperationId", operationIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase = new TableMappingBase<ColumnMappingBase>(doctor_Operation, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase, false);
            defaultTableMappings2.Add(medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doctorIdColumnBase, doctor_Operation.FindProperty("DoctorId")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operationIdColumnBase, doctor_Operation.FindProperty("OperationId")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase2, doctor_Operation.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase2, doctor_Operation.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_OperationMappingBase);

            var tableMappings2 = new List<TableMapping>();
            doctor_Operation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var doctor_OperationTable = new Table("Doctor_Operation", null, relationalModel);
            var doctorIdColumn = new Column("DoctorId", "int", doctor_OperationTable);
            doctor_OperationTable.Columns.Add("DoctorId", doctorIdColumn);
            var operationIdColumn = new Column("OperationId", "bigint", doctor_OperationTable);
            doctor_OperationTable.Columns.Add("OperationId", operationIdColumn);
            var createdByColumn2 = new Column("CreatedBy", "bigint", doctor_OperationTable);
            doctor_OperationTable.Columns.Add("CreatedBy", createdByColumn2);
            var dateTimeCreatedColumn2 = new Column("DateTimeCreated", "datetime2", doctor_OperationTable)
            {
                IsNullable = true
            };
            doctor_OperationTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn2);
            var pK_Doctor_Operation = new UniqueConstraint("PK_Doctor_Operation", doctor_OperationTable, new[] { doctorIdColumn, operationIdColumn });
            doctor_OperationTable.PrimaryKey = pK_Doctor_Operation;
            var pK_Doctor_OperationUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation",
                new[] { "DoctorId", "OperationId" });
            pK_Doctor_Operation.MappedKeys.Add(pK_Doctor_OperationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Doctor_OperationUc).Add(pK_Doctor_Operation);
            doctor_OperationTable.UniqueConstraints.Add("PK_Doctor_Operation", pK_Doctor_Operation);
            var iX_Doctor_Operation_OperationId = new TableIndex(
            "IX_Doctor_Operation_OperationId", doctor_OperationTable, new[] { operationIdColumn }, false);
            var iX_Doctor_Operation_OperationIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation",
                new[] { "OperationId" });
            iX_Doctor_Operation_OperationId.MappedIndexes.Add(iX_Doctor_Operation_OperationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Doctor_Operation_OperationIdIx).Add(iX_Doctor_Operation_OperationId);
            doctor_OperationTable.Indexes.Add("IX_Doctor_Operation_OperationId", iX_Doctor_Operation_OperationId);
            relationalModel.Tables.Add(("Doctor_Operation", null), doctor_OperationTable);
            var doctor_OperationTableMapping = new TableMapping(doctor_Operation, doctor_OperationTable, true);
            doctor_OperationTable.AddTypeMapping(doctor_OperationTableMapping, false);
            tableMappings2.Add(doctor_OperationTableMapping);
            RelationalModel.CreateColumnMapping(doctorIdColumn, doctor_Operation.FindProperty("DoctorId")!, doctor_OperationTableMapping);
            RelationalModel.CreateColumnMapping(operationIdColumn, doctor_Operation.FindProperty("OperationId")!, doctor_OperationTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn2, doctor_Operation.FindProperty("CreatedBy")!, doctor_OperationTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn2, doctor_Operation.FindProperty("DateTimeCreated")!, doctor_OperationTableMapping);

            var doctor_Specialty = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            doctor_Specialty.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty", null, relationalModel);
            var createdByColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase.Columns.Add("CreatedBy", createdByColumnBase3);
            var dateTimeCreatedColumnBase3 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase3);
            var doctorIdColumnBase0 = new ColumnBase<ColumnMappingBase>("DoctorId", "int", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase.Columns.Add("DoctorId", doctorIdColumnBase0);
            var specialtyIdColumnBase = new ColumnBase<ColumnMappingBase>("SpecialtyId", "int", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase.Columns.Add("SpecialtyId", specialtyIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase = new TableMappingBase<ColumnMappingBase>(doctor_Specialty, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase, false);
            defaultTableMappings3.Add(medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doctorIdColumnBase0, doctor_Specialty.FindProperty("DoctorId")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)specialtyIdColumnBase, doctor_Specialty.FindProperty("SpecialtyId")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase3, doctor_Specialty.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase3, doctor_Specialty.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_SpecialtyMappingBase);

            var tableMappings3 = new List<TableMapping>();
            doctor_Specialty.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var doctor_SpecialtyTable = new Table("Doctor_Specialty", null, relationalModel);
            var doctorIdColumn0 = new Column("DoctorId", "int", doctor_SpecialtyTable);
            doctor_SpecialtyTable.Columns.Add("DoctorId", doctorIdColumn0);
            var specialtyIdColumn = new Column("SpecialtyId", "int", doctor_SpecialtyTable);
            doctor_SpecialtyTable.Columns.Add("SpecialtyId", specialtyIdColumn);
            var createdByColumn3 = new Column("CreatedBy", "bigint", doctor_SpecialtyTable);
            doctor_SpecialtyTable.Columns.Add("CreatedBy", createdByColumn3);
            var dateTimeCreatedColumn3 = new Column("DateTimeCreated", "datetime2", doctor_SpecialtyTable)
            {
                IsNullable = true
            };
            doctor_SpecialtyTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn3);
            var pK_Doctor_Specialty = new UniqueConstraint("PK_Doctor_Specialty", doctor_SpecialtyTable, new[] { doctorIdColumn0, specialtyIdColumn });
            doctor_SpecialtyTable.PrimaryKey = pK_Doctor_Specialty;
            var pK_Doctor_SpecialtyUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty",
                new[] { "DoctorId", "SpecialtyId" });
            pK_Doctor_Specialty.MappedKeys.Add(pK_Doctor_SpecialtyUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Doctor_SpecialtyUc).Add(pK_Doctor_Specialty);
            doctor_SpecialtyTable.UniqueConstraints.Add("PK_Doctor_Specialty", pK_Doctor_Specialty);
            var iX_Doctor_Specialty_SpecialtyId = new TableIndex(
            "IX_Doctor_Specialty_SpecialtyId", doctor_SpecialtyTable, new[] { specialtyIdColumn }, false);
            var iX_Doctor_Specialty_SpecialtyIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty",
                new[] { "SpecialtyId" });
            iX_Doctor_Specialty_SpecialtyId.MappedIndexes.Add(iX_Doctor_Specialty_SpecialtyIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Doctor_Specialty_SpecialtyIdIx).Add(iX_Doctor_Specialty_SpecialtyId);
            doctor_SpecialtyTable.Indexes.Add("IX_Doctor_Specialty_SpecialtyId", iX_Doctor_Specialty_SpecialtyId);
            relationalModel.Tables.Add(("Doctor_Specialty", null), doctor_SpecialtyTable);
            var doctor_SpecialtyTableMapping = new TableMapping(doctor_Specialty, doctor_SpecialtyTable, true);
            doctor_SpecialtyTable.AddTypeMapping(doctor_SpecialtyTableMapping, false);
            tableMappings3.Add(doctor_SpecialtyTableMapping);
            RelationalModel.CreateColumnMapping(doctorIdColumn0, doctor_Specialty.FindProperty("DoctorId")!, doctor_SpecialtyTableMapping);
            RelationalModel.CreateColumnMapping(specialtyIdColumn, doctor_Specialty.FindProperty("SpecialtyId")!, doctor_SpecialtyTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn3, doctor_Specialty.FindProperty("CreatedBy")!, doctor_SpecialtyTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn3, doctor_Specialty.FindProperty("DateTimeCreated")!, doctor_SpecialtyTableMapping);

            var doctor_Visit = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            doctor_Visit.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit", null, relationalModel);
            var createdByColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase.Columns.Add("CreatedBy", createdByColumnBase4);
            var dateTimeCreatedColumnBase4 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase4);
            var doctorIdColumnBase1 = new ColumnBase<ColumnMappingBase>("DoctorId", "int", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase.Columns.Add("DoctorId", doctorIdColumnBase1);
            var visitIdColumnBase = new ColumnBase<ColumnMappingBase>("VisitId", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase.Columns.Add("VisitId", visitIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit", medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase = new TableMappingBase<ColumnMappingBase>(doctor_Visit, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase, false);
            defaultTableMappings4.Add(medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doctorIdColumnBase1, doctor_Visit.FindProperty("DoctorId")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)visitIdColumnBase, doctor_Visit.FindProperty("VisitId")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase4, doctor_Visit.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase4, doctor_Visit.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesDoctor_VisitMappingBase);

            var tableMappings4 = new List<TableMapping>();
            doctor_Visit.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var doctor_VisitTable = new Table("Doctor_Visit", null, relationalModel);
            var doctorIdColumn1 = new Column("DoctorId", "int", doctor_VisitTable);
            doctor_VisitTable.Columns.Add("DoctorId", doctorIdColumn1);
            var visitIdColumn = new Column("VisitId", "bigint", doctor_VisitTable);
            doctor_VisitTable.Columns.Add("VisitId", visitIdColumn);
            var createdByColumn4 = new Column("CreatedBy", "bigint", doctor_VisitTable);
            doctor_VisitTable.Columns.Add("CreatedBy", createdByColumn4);
            var dateTimeCreatedColumn4 = new Column("DateTimeCreated", "datetime2", doctor_VisitTable)
            {
                IsNullable = true
            };
            doctor_VisitTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn4);
            var pK_Doctor_Visit = new UniqueConstraint("PK_Doctor_Visit", doctor_VisitTable, new[] { doctorIdColumn1, visitIdColumn });
            doctor_VisitTable.PrimaryKey = pK_Doctor_Visit;
            var pK_Doctor_VisitUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit",
                new[] { "DoctorId", "VisitId" });
            pK_Doctor_Visit.MappedKeys.Add(pK_Doctor_VisitUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Doctor_VisitUc).Add(pK_Doctor_Visit);
            doctor_VisitTable.UniqueConstraints.Add("PK_Doctor_Visit", pK_Doctor_Visit);
            var iX_Doctor_Visit_VisitId = new TableIndex(
            "IX_Doctor_Visit_VisitId", doctor_VisitTable, new[] { visitIdColumn }, false);
            var iX_Doctor_Visit_VisitIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit",
                new[] { "VisitId" });
            iX_Doctor_Visit_VisitId.MappedIndexes.Add(iX_Doctor_Visit_VisitIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Doctor_Visit_VisitIdIx).Add(iX_Doctor_Visit_VisitId);
            doctor_VisitTable.Indexes.Add("IX_Doctor_Visit_VisitId", iX_Doctor_Visit_VisitId);
            relationalModel.Tables.Add(("Doctor_Visit", null), doctor_VisitTable);
            var doctor_VisitTableMapping = new TableMapping(doctor_Visit, doctor_VisitTable, true);
            doctor_VisitTable.AddTypeMapping(doctor_VisitTableMapping, false);
            tableMappings4.Add(doctor_VisitTableMapping);
            RelationalModel.CreateColumnMapping(doctorIdColumn1, doctor_Visit.FindProperty("DoctorId")!, doctor_VisitTableMapping);
            RelationalModel.CreateColumnMapping(visitIdColumn, doctor_Visit.FindProperty("VisitId")!, doctor_VisitTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn4, doctor_Visit.FindProperty("CreatedBy")!, doctor_VisitTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn4, doctor_Visit.FindProperty("DateTimeCreated")!, doctor_VisitTableMapping);

            var medicine_Operation = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            medicine_Operation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation", null, relationalModel);
            var createdByColumnBase5 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase.Columns.Add("CreatedBy", createdByColumnBase5);
            var dateTimeCreatedColumnBase5 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase5);
            var medicineIdColumnBase = new ColumnBase<ColumnMappingBase>("MedicineId", "int", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase.Columns.Add("MedicineId", medicineIdColumnBase);
            var operationIdColumnBase0 = new ColumnBase<ColumnMappingBase>("OperationId", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase.Columns.Add("OperationId", operationIdColumnBase0);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase = new TableMappingBase<ColumnMappingBase>(medicine_Operation, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase, false);
            defaultTableMappings5.Add(medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)medicineIdColumnBase, medicine_Operation.FindProperty("MedicineId")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operationIdColumnBase0, medicine_Operation.FindProperty("OperationId")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase5, medicine_Operation.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase5, medicine_Operation.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_OperationMappingBase);

            var tableMappings5 = new List<TableMapping>();
            medicine_Operation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var medicine_OperationTable = new Table("Medicine_Operation", null, relationalModel);
            var medicineIdColumn = new Column("MedicineId", "int", medicine_OperationTable);
            medicine_OperationTable.Columns.Add("MedicineId", medicineIdColumn);
            var operationIdColumn0 = new Column("OperationId", "bigint", medicine_OperationTable);
            medicine_OperationTable.Columns.Add("OperationId", operationIdColumn0);
            var createdByColumn5 = new Column("CreatedBy", "bigint", medicine_OperationTable);
            medicine_OperationTable.Columns.Add("CreatedBy", createdByColumn5);
            var dateTimeCreatedColumn5 = new Column("DateTimeCreated", "datetime2", medicine_OperationTable)
            {
                IsNullable = true
            };
            medicine_OperationTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn5);
            var pK_Medicine_Operation = new UniqueConstraint("PK_Medicine_Operation", medicine_OperationTable, new[] { medicineIdColumn, operationIdColumn0 });
            medicine_OperationTable.PrimaryKey = pK_Medicine_Operation;
            var pK_Medicine_OperationUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation",
                new[] { "MedicineId", "OperationId" });
            pK_Medicine_Operation.MappedKeys.Add(pK_Medicine_OperationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Medicine_OperationUc).Add(pK_Medicine_Operation);
            medicine_OperationTable.UniqueConstraints.Add("PK_Medicine_Operation", pK_Medicine_Operation);
            var iX_Medicine_Operation_OperationId = new TableIndex(
            "IX_Medicine_Operation_OperationId", medicine_OperationTable, new[] { operationIdColumn0 }, false);
            var iX_Medicine_Operation_OperationIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation",
                new[] { "OperationId" });
            iX_Medicine_Operation_OperationId.MappedIndexes.Add(iX_Medicine_Operation_OperationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Medicine_Operation_OperationIdIx).Add(iX_Medicine_Operation_OperationId);
            medicine_OperationTable.Indexes.Add("IX_Medicine_Operation_OperationId", iX_Medicine_Operation_OperationId);
            relationalModel.Tables.Add(("Medicine_Operation", null), medicine_OperationTable);
            var medicine_OperationTableMapping = new TableMapping(medicine_Operation, medicine_OperationTable, true);
            medicine_OperationTable.AddTypeMapping(medicine_OperationTableMapping, false);
            tableMappings5.Add(medicine_OperationTableMapping);
            RelationalModel.CreateColumnMapping(medicineIdColumn, medicine_Operation.FindProperty("MedicineId")!, medicine_OperationTableMapping);
            RelationalModel.CreateColumnMapping(operationIdColumn0, medicine_Operation.FindProperty("OperationId")!, medicine_OperationTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn5, medicine_Operation.FindProperty("CreatedBy")!, medicine_OperationTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn5, medicine_Operation.FindProperty("DateTimeCreated")!, medicine_OperationTableMapping);

            var medicine_PatientHistory = FindEntityType("MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            medicine_PatientHistory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase = new TableBase("MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory", null, relationalModel);
            var createdByColumnBase6 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase.Columns.Add("CreatedBy", createdByColumnBase6);
            var dateTimeCreatedColumnBase6 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase6);
            var medicineIdColumnBase0 = new ColumnBase<ColumnMappingBase>("MedicineId", "int", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase.Columns.Add("MedicineId", medicineIdColumnBase0);
            var patientHistoryIdColumnBase = new ColumnBase<ColumnMappingBase>("PatientHistoryId", "bigint", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase.Columns.Add("PatientHistoryId", patientHistoryIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory", medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase);
            var medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase = new TableMappingBase<ColumnMappingBase>(medicine_PatientHistory, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase, true);
            medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryTableBase.AddTypeMapping(medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase, false);
            defaultTableMappings6.Add(medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)medicineIdColumnBase0, medicine_PatientHistory.FindProperty("MedicineId")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)patientHistoryIdColumnBase, medicine_PatientHistory.FindProperty("PatientHistoryId")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase6, medicine_PatientHistory.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase6, medicine_PatientHistory.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesIntermediateEntitiesMedicine_PatientHistoryMappingBase);

            var tableMappings6 = new List<TableMapping>();
            medicine_PatientHistory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var medicine_PatientHistoryTable = new Table("Medicine_PatientHistory", null, relationalModel);
            var medicineIdColumn0 = new Column("MedicineId", "int", medicine_PatientHistoryTable);
            medicine_PatientHistoryTable.Columns.Add("MedicineId", medicineIdColumn0);
            var patientHistoryIdColumn = new Column("PatientHistoryId", "bigint", medicine_PatientHistoryTable);
            medicine_PatientHistoryTable.Columns.Add("PatientHistoryId", patientHistoryIdColumn);
            var createdByColumn6 = new Column("CreatedBy", "bigint", medicine_PatientHistoryTable);
            medicine_PatientHistoryTable.Columns.Add("CreatedBy", createdByColumn6);
            var dateTimeCreatedColumn6 = new Column("DateTimeCreated", "datetime2", medicine_PatientHistoryTable)
            {
                IsNullable = true
            };
            medicine_PatientHistoryTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn6);
            var pK_Medicine_PatientHistory = new UniqueConstraint("PK_Medicine_PatientHistory", medicine_PatientHistoryTable, new[] { medicineIdColumn0, patientHistoryIdColumn });
            medicine_PatientHistoryTable.PrimaryKey = pK_Medicine_PatientHistory;
            var pK_Medicine_PatientHistoryUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory",
                new[] { "MedicineId", "PatientHistoryId" });
            pK_Medicine_PatientHistory.MappedKeys.Add(pK_Medicine_PatientHistoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Medicine_PatientHistoryUc).Add(pK_Medicine_PatientHistory);
            medicine_PatientHistoryTable.UniqueConstraints.Add("PK_Medicine_PatientHistory", pK_Medicine_PatientHistory);
            var iX_Medicine_PatientHistory_PatientHistoryId = new TableIndex(
            "IX_Medicine_PatientHistory_PatientHistoryId", medicine_PatientHistoryTable, new[] { patientHistoryIdColumn }, false);
            var iX_Medicine_PatientHistory_PatientHistoryIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory",
                new[] { "PatientHistoryId" });
            iX_Medicine_PatientHistory_PatientHistoryId.MappedIndexes.Add(iX_Medicine_PatientHistory_PatientHistoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Medicine_PatientHistory_PatientHistoryIdIx).Add(iX_Medicine_PatientHistory_PatientHistoryId);
            medicine_PatientHistoryTable.Indexes.Add("IX_Medicine_PatientHistory_PatientHistoryId", iX_Medicine_PatientHistory_PatientHistoryId);
            relationalModel.Tables.Add(("Medicine_PatientHistory", null), medicine_PatientHistoryTable);
            var medicine_PatientHistoryTableMapping = new TableMapping(medicine_PatientHistory, medicine_PatientHistoryTable, true);
            medicine_PatientHistoryTable.AddTypeMapping(medicine_PatientHistoryTableMapping, false);
            tableMappings6.Add(medicine_PatientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(medicineIdColumn0, medicine_PatientHistory.FindProperty("MedicineId")!, medicine_PatientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(patientHistoryIdColumn, medicine_PatientHistory.FindProperty("PatientHistoryId")!, medicine_PatientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn6, medicine_PatientHistory.FindProperty("CreatedBy")!, medicine_PatientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn6, medicine_PatientHistory.FindProperty("DateTimeCreated")!, medicine_PatientHistoryTableMapping);

            var medicalCenter = FindEntityType("MedicalCenters.Domain.Entities.MedicalCenter")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            medicalCenter.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var medicalCentersDomainEntitiesMedicalCenterTableBase = new TableBase("MedicalCenters.Domain.Entities.MedicalCenter", null, relationalModel);
            var addressColumnBase = new ColumnBase<ColumnMappingBase>("Address", "nvarchar(200)", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("Address", addressColumnBase);
            var createdByColumnBase7 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("CreatedBy", createdByColumnBase7);
            var dateTimeCreatedColumnBase7 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicalCenterTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase7);
            var dateTimeModifiedColumnBase0 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesMedicalCenterTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase0);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("Description", descriptionColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("Id", idColumnBase0);
            var locationColumnBase = new ColumnBase<ColumnMappingBase>("Location", "geography", medicalCentersDomainEntitiesMedicalCenterTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("Location", locationColumnBase);
            var modifiedByColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(70)", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("Name", nameColumnBase0);
            var typeIdColumnBase = new ColumnBase<ColumnMappingBase>("TypeId", "int", medicalCentersDomainEntitiesMedicalCenterTableBase);
            medicalCentersDomainEntitiesMedicalCenterTableBase.Columns.Add("TypeId", typeIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.MedicalCenter", medicalCentersDomainEntitiesMedicalCenterTableBase);
            var medicalCentersDomainEntitiesMedicalCenterMappingBase = new TableMappingBase<ColumnMappingBase>(medicalCenter, medicalCentersDomainEntitiesMedicalCenterTableBase, true);
            medicalCentersDomainEntitiesMedicalCenterTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicalCenterMappingBase, false);
            defaultTableMappings7.Add(medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, medicalCenter.FindProperty("Id")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addressColumnBase, medicalCenter.FindProperty("Address")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase7, medicalCenter.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase7, medicalCenter.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase0, medicalCenter.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, medicalCenter.FindProperty("Description")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)locationColumnBase, medicalCenter.FindProperty("Location")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase0, medicalCenter.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, medicalCenter.FindProperty("Name")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeIdColumnBase, medicalCenter.FindProperty("TypeId")!, medicalCentersDomainEntitiesMedicalCenterMappingBase);

            var tableMappings7 = new List<TableMapping>();
            medicalCenter.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var medicalCenterTable = new Table("MedicalCenter", null, relationalModel);
            var idColumn0 = new Column("Id", "int", medicalCenterTable);
            medicalCenterTable.Columns.Add("Id", idColumn0);
            var addressColumn = new Column("Address", "nvarchar(200)", medicalCenterTable);
            medicalCenterTable.Columns.Add("Address", addressColumn);
            var createdByColumn7 = new Column("CreatedBy", "bigint", medicalCenterTable);
            medicalCenterTable.Columns.Add("CreatedBy", createdByColumn7);
            var dateTimeCreatedColumn7 = new Column("DateTimeCreated", "datetime2", medicalCenterTable)
            {
                IsNullable = true
            };
            medicalCenterTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn7);
            var dateTimeModifiedColumn0 = new Column("DateTimeModified", "datetime2", medicalCenterTable)
            {
                IsNullable = true
            };
            medicalCenterTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn0);
            var descriptionColumn0 = new Column("Description", "nvarchar(1000)", medicalCenterTable);
            medicalCenterTable.Columns.Add("Description", descriptionColumn0);
            var locationColumn = new Column("Location", "geography", medicalCenterTable)
            {
                IsNullable = true
            };
            medicalCenterTable.Columns.Add("Location", locationColumn);
            var modifiedByColumn0 = new Column("ModifiedBy", "bigint", medicalCenterTable);
            medicalCenterTable.Columns.Add("ModifiedBy", modifiedByColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(70)", medicalCenterTable);
            medicalCenterTable.Columns.Add("Name", nameColumn0);
            var typeIdColumn = new Column("TypeId", "int", medicalCenterTable);
            medicalCenterTable.Columns.Add("TypeId", typeIdColumn);
            var pK_MedicalCenter = new UniqueConstraint("PK_MedicalCenter", medicalCenterTable, new[] { idColumn0 });
            medicalCenterTable.PrimaryKey = pK_MedicalCenter;
            var pK_MedicalCenterUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.MedicalCenter",
                new[] { "Id" });
            pK_MedicalCenter.MappedKeys.Add(pK_MedicalCenterUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicalCenterUc).Add(pK_MedicalCenter);
            medicalCenterTable.UniqueConstraints.Add("PK_MedicalCenter", pK_MedicalCenter);
            var iX_MedicalCenter_TypeId = new TableIndex(
            "IX_MedicalCenter_TypeId", medicalCenterTable, new[] { typeIdColumn }, false);
            var iX_MedicalCenter_TypeIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.MedicalCenter",
                new[] { "TypeId" });
            iX_MedicalCenter_TypeId.MappedIndexes.Add(iX_MedicalCenter_TypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MedicalCenter_TypeIdIx).Add(iX_MedicalCenter_TypeId);
            medicalCenterTable.Indexes.Add("IX_MedicalCenter_TypeId", iX_MedicalCenter_TypeId);
            relationalModel.Tables.Add(("MedicalCenter", null), medicalCenterTable);
            var medicalCenterTableMapping = new TableMapping(medicalCenter, medicalCenterTable, true);
            medicalCenterTable.AddTypeMapping(medicalCenterTableMapping, false);
            tableMappings7.Add(medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, medicalCenter.FindProperty("Id")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(addressColumn, medicalCenter.FindProperty("Address")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn7, medicalCenter.FindProperty("CreatedBy")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn7, medicalCenter.FindProperty("DateTimeCreated")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn0, medicalCenter.FindProperty("DateTimeModified")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, medicalCenter.FindProperty("Description")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(locationColumn, medicalCenter.FindProperty("Location")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn0, medicalCenter.FindProperty("ModifiedBy")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, medicalCenter.FindProperty("Name")!, medicalCenterTableMapping);
            RelationalModel.CreateColumnMapping(typeIdColumn, medicalCenter.FindProperty("TypeId")!, medicalCenterTableMapping);

            var medicalCenterType = FindEntityType("MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalCenterType")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            medicalCenterType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase = new TableBase("MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalCenterType", null, relationalModel);
            var createdByColumnBase8 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase.Columns.Add("CreatedBy", createdByColumnBase8);
            var dateTimeCreatedColumnBase8 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase8);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(70)", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase.Columns.Add("Name", nameColumnBase1);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalCenterType", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase);
            var medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase = new TableMappingBase<ColumnMappingBase>(medicalCenterType, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase, true);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase, false);
            defaultTableMappings8.Add(medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, medicalCenterType.FindProperty("Id")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase8, medicalCenterType.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase8, medicalCenterType.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, medicalCenterType.FindProperty("Name")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalCenterTypeMappingBase);

            var tableMappings8 = new List<TableMapping>();
            medicalCenterType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var medicalCenterTypeTable = new Table("MedicalCenterType", null, relationalModel);
            var idColumn1 = new Column("Id", "int", medicalCenterTypeTable);
            medicalCenterTypeTable.Columns.Add("Id", idColumn1);
            var createdByColumn8 = new Column("CreatedBy", "bigint", medicalCenterTypeTable);
            medicalCenterTypeTable.Columns.Add("CreatedBy", createdByColumn8);
            var dateTimeCreatedColumn8 = new Column("DateTimeCreated", "datetime2", medicalCenterTypeTable)
            {
                IsNullable = true
            };
            medicalCenterTypeTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn8);
            var nameColumn1 = new Column("Name", "nvarchar(70)", medicalCenterTypeTable);
            medicalCenterTypeTable.Columns.Add("Name", nameColumn1);
            var pK_MedicalCenterType = new UniqueConstraint("PK_MedicalCenterType", medicalCenterTypeTable, new[] { idColumn1 });
            medicalCenterTypeTable.PrimaryKey = pK_MedicalCenterType;
            var pK_MedicalCenterTypeUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalCenterType",
                new[] { "Id" });
            pK_MedicalCenterType.MappedKeys.Add(pK_MedicalCenterTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicalCenterTypeUc).Add(pK_MedicalCenterType);
            medicalCenterTypeTable.UniqueConstraints.Add("PK_MedicalCenterType", pK_MedicalCenterType);
            relationalModel.Tables.Add(("MedicalCenterType", null), medicalCenterTypeTable);
            var medicalCenterTypeTableMapping = new TableMapping(medicalCenterType, medicalCenterTypeTable, true);
            medicalCenterTypeTable.AddTypeMapping(medicalCenterTypeTableMapping, false);
            tableMappings8.Add(medicalCenterTypeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, medicalCenterType.FindProperty("Id")!, medicalCenterTypeTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn8, medicalCenterType.FindProperty("CreatedBy")!, medicalCenterTypeTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn8, medicalCenterType.FindProperty("DateTimeCreated")!, medicalCenterTypeTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, medicalCenterType.FindProperty("Name")!, medicalCenterTypeTableMapping);

            var medicalWardType = FindEntityType("MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalWardType")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            medicalWardType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase = new TableBase("MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalWardType", null, relationalModel);
            var createdByColumnBase9 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase.Columns.Add("CreatedBy", createdByColumnBase9);
            var dateTimeCreatedColumnBase9 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase9);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase.Columns.Add("Description", descriptionColumnBase1);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(70)", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase.Columns.Add("Name", nameColumnBase2);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalWardType", medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase);
            var medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase = new TableMappingBase<ColumnMappingBase>(medicalWardType, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase, true);
            medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase, false);
            defaultTableMappings9.Add(medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, medicalWardType.FindProperty("Id")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase9, medicalWardType.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase9, medicalWardType.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, medicalWardType.FindProperty("Description")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, medicalWardType.FindProperty("Name")!, medicalCentersDomainEntitiesMedicalCenter_PartsMedicalWardTypeMappingBase);

            var tableMappings9 = new List<TableMapping>();
            medicalWardType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var medicalWardTypeTable = new Table("MedicalWardType", null, relationalModel);
            var idColumn2 = new Column("Id", "int", medicalWardTypeTable);
            medicalWardTypeTable.Columns.Add("Id", idColumn2);
            var createdByColumn9 = new Column("CreatedBy", "bigint", medicalWardTypeTable);
            medicalWardTypeTable.Columns.Add("CreatedBy", createdByColumn9);
            var dateTimeCreatedColumn9 = new Column("DateTimeCreated", "datetime2", medicalWardTypeTable)
            {
                IsNullable = true
            };
            medicalWardTypeTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn9);
            var descriptionColumn1 = new Column("Description", "nvarchar(1000)", medicalWardTypeTable)
            {
                IsNullable = true
            };
            medicalWardTypeTable.Columns.Add("Description", descriptionColumn1);
            var nameColumn2 = new Column("Name", "nvarchar(70)", medicalWardTypeTable);
            medicalWardTypeTable.Columns.Add("Name", nameColumn2);
            var pK_MedicalWardType = new UniqueConstraint("PK_MedicalWardType", medicalWardTypeTable, new[] { idColumn2 });
            medicalWardTypeTable.PrimaryKey = pK_MedicalWardType;
            var pK_MedicalWardTypeUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalWardType",
                new[] { "Id" });
            pK_MedicalWardType.MappedKeys.Add(pK_MedicalWardTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicalWardTypeUc).Add(pK_MedicalWardType);
            medicalWardTypeTable.UniqueConstraints.Add("PK_MedicalWardType", pK_MedicalWardType);
            relationalModel.Tables.Add(("MedicalWardType", null), medicalWardTypeTable);
            var medicalWardTypeTableMapping = new TableMapping(medicalWardType, medicalWardTypeTable, true);
            medicalWardTypeTable.AddTypeMapping(medicalWardTypeTableMapping, false);
            tableMappings9.Add(medicalWardTypeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, medicalWardType.FindProperty("Id")!, medicalWardTypeTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn9, medicalWardType.FindProperty("CreatedBy")!, medicalWardTypeTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn9, medicalWardType.FindProperty("DateTimeCreated")!, medicalWardTypeTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, medicalWardType.FindProperty("Description")!, medicalWardTypeTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, medicalWardType.FindProperty("Name")!, medicalWardTypeTableMapping);

            var medicalUnit = FindEntityType("MedicalCenters.Domain.Entities.MedicalUnit")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            medicalUnit.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var medicalCentersDomainEntitiesMedicalUnitTableBase = new TableBase("MedicalCenters.Domain.Entities.MedicalUnit", null, relationalModel);
            var createdByColumnBase10 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicalUnitTableBase);
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("CreatedBy", createdByColumnBase10);
            var dateTimeCreatedColumnBase10 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicalUnitTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase10);
            var dateTimeModifiedColumnBase1 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesMedicalUnitTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase1);
            var descriptionColumnBase2 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesMedicalUnitTableBase);
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("Description", descriptionColumnBase2);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicalUnitTableBase);
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("Id", idColumnBase3);
            var modifiedByColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesMedicalUnitTableBase);
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase1);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(70)", medicalCentersDomainEntitiesMedicalUnitTableBase);
            medicalCentersDomainEntitiesMedicalUnitTableBase.Columns.Add("Name", nameColumnBase3);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.MedicalUnit", medicalCentersDomainEntitiesMedicalUnitTableBase);
            var medicalCentersDomainEntitiesMedicalUnitMappingBase = new TableMappingBase<ColumnMappingBase>(medicalUnit, medicalCentersDomainEntitiesMedicalUnitTableBase, true);
            medicalCentersDomainEntitiesMedicalUnitTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicalUnitMappingBase, false);
            defaultTableMappings10.Add(medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, medicalUnit.FindProperty("Id")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase10, medicalUnit.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase10, medicalUnit.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase1, medicalUnit.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase2, medicalUnit.FindProperty("Description")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase1, medicalUnit.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, medicalUnit.FindProperty("Name")!, medicalCentersDomainEntitiesMedicalUnitMappingBase);

            var tableMappings10 = new List<TableMapping>();
            medicalUnit.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var medicalUnitTable = new Table("MedicalUnit", null, relationalModel);
            var idColumn3 = new Column("Id", "int", medicalUnitTable);
            medicalUnitTable.Columns.Add("Id", idColumn3);
            var createdByColumn10 = new Column("CreatedBy", "bigint", medicalUnitTable);
            medicalUnitTable.Columns.Add("CreatedBy", createdByColumn10);
            var dateTimeCreatedColumn10 = new Column("DateTimeCreated", "datetime2", medicalUnitTable)
            {
                IsNullable = true
            };
            medicalUnitTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn10);
            var dateTimeModifiedColumn1 = new Column("DateTimeModified", "datetime2", medicalUnitTable)
            {
                IsNullable = true
            };
            medicalUnitTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn1);
            var descriptionColumn2 = new Column("Description", "nvarchar(1000)", medicalUnitTable);
            medicalUnitTable.Columns.Add("Description", descriptionColumn2);
            var modifiedByColumn1 = new Column("ModifiedBy", "bigint", medicalUnitTable);
            medicalUnitTable.Columns.Add("ModifiedBy", modifiedByColumn1);
            var nameColumn3 = new Column("Name", "nvarchar(70)", medicalUnitTable);
            medicalUnitTable.Columns.Add("Name", nameColumn3);
            var pK_MedicalUnit = new UniqueConstraint("PK_MedicalUnit", medicalUnitTable, new[] { idColumn3 });
            medicalUnitTable.PrimaryKey = pK_MedicalUnit;
            var pK_MedicalUnitUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.MedicalUnit",
                new[] { "Id" });
            pK_MedicalUnit.MappedKeys.Add(pK_MedicalUnitUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicalUnitUc).Add(pK_MedicalUnit);
            medicalUnitTable.UniqueConstraints.Add("PK_MedicalUnit", pK_MedicalUnit);
            relationalModel.Tables.Add(("MedicalUnit", null), medicalUnitTable);
            var medicalUnitTableMapping = new TableMapping(medicalUnit, medicalUnitTable, true);
            medicalUnitTable.AddTypeMapping(medicalUnitTableMapping, false);
            tableMappings10.Add(medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, medicalUnit.FindProperty("Id")!, medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn10, medicalUnit.FindProperty("CreatedBy")!, medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn10, medicalUnit.FindProperty("DateTimeCreated")!, medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn1, medicalUnit.FindProperty("DateTimeModified")!, medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn2, medicalUnit.FindProperty("Description")!, medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn1, medicalUnit.FindProperty("ModifiedBy")!, medicalUnitTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, medicalUnit.FindProperty("Name")!, medicalUnitTableMapping);

            var medicalWard = FindEntityType("MedicalCenters.Domain.Entities.MedicalWard")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            medicalWard.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var medicalCentersDomainEntitiesMedicalWardTableBase = new TableBase("MedicalCenters.Domain.Entities.MedicalWard", null, relationalModel);
            var createdByColumnBase11 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("CreatedBy", createdByColumnBase11);
            var dateTimeCreatedColumnBase11 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicalWardTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase11);
            var dateTimeModifiedColumnBase2 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesMedicalWardTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase2);
            var descriptionColumnBase3 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("Description", descriptionColumnBase3);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("Id", idColumnBase4);
            var medicalCenterIdColumnBase = new ColumnBase<ColumnMappingBase>("MedicalCenterId", "int", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("MedicalCenterId", medicalCenterIdColumnBase);
            var modifiedByColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase2);
            var nameColumnBase4 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(70)", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("Name", nameColumnBase4);
            var typeIdColumnBase0 = new ColumnBase<ColumnMappingBase>("TypeId", "int", medicalCentersDomainEntitiesMedicalWardTableBase);
            medicalCentersDomainEntitiesMedicalWardTableBase.Columns.Add("TypeId", typeIdColumnBase0);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.MedicalWard", medicalCentersDomainEntitiesMedicalWardTableBase);
            var medicalCentersDomainEntitiesMedicalWardMappingBase = new TableMappingBase<ColumnMappingBase>(medicalWard, medicalCentersDomainEntitiesMedicalWardTableBase, true);
            medicalCentersDomainEntitiesMedicalWardTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicalWardMappingBase, false);
            defaultTableMappings11.Add(medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, medicalWard.FindProperty("Id")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase11, medicalWard.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase11, medicalWard.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase2, medicalWard.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase3, medicalWard.FindProperty("Description")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)medicalCenterIdColumnBase, medicalWard.FindProperty("MedicalCenterId")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase2, medicalWard.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase4, medicalWard.FindProperty("Name")!, medicalCentersDomainEntitiesMedicalWardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeIdColumnBase0, medicalWard.FindProperty("TypeId")!, medicalCentersDomainEntitiesMedicalWardMappingBase);

            var tableMappings11 = new List<TableMapping>();
            medicalWard.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var medicalWardTable = new Table("MedicalWard", null, relationalModel);
            var idColumn4 = new Column("Id", "int", medicalWardTable);
            medicalWardTable.Columns.Add("Id", idColumn4);
            var createdByColumn11 = new Column("CreatedBy", "bigint", medicalWardTable);
            medicalWardTable.Columns.Add("CreatedBy", createdByColumn11);
            var dateTimeCreatedColumn11 = new Column("DateTimeCreated", "datetime2", medicalWardTable)
            {
                IsNullable = true
            };
            medicalWardTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn11);
            var dateTimeModifiedColumn2 = new Column("DateTimeModified", "datetime2", medicalWardTable)
            {
                IsNullable = true
            };
            medicalWardTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn2);
            var descriptionColumn3 = new Column("Description", "nvarchar(1000)", medicalWardTable);
            medicalWardTable.Columns.Add("Description", descriptionColumn3);
            var medicalCenterIdColumn = new Column("MedicalCenterId", "int", medicalWardTable);
            medicalWardTable.Columns.Add("MedicalCenterId", medicalCenterIdColumn);
            var modifiedByColumn2 = new Column("ModifiedBy", "bigint", medicalWardTable);
            medicalWardTable.Columns.Add("ModifiedBy", modifiedByColumn2);
            var nameColumn4 = new Column("Name", "nvarchar(70)", medicalWardTable);
            medicalWardTable.Columns.Add("Name", nameColumn4);
            var typeIdColumn0 = new Column("TypeId", "int", medicalWardTable);
            medicalWardTable.Columns.Add("TypeId", typeIdColumn0);
            var pK_MedicalWard = new UniqueConstraint("PK_MedicalWard", medicalWardTable, new[] { idColumn4 });
            medicalWardTable.PrimaryKey = pK_MedicalWard;
            var pK_MedicalWardUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.MedicalWard",
                new[] { "Id" });
            pK_MedicalWard.MappedKeys.Add(pK_MedicalWardUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicalWardUc).Add(pK_MedicalWard);
            medicalWardTable.UniqueConstraints.Add("PK_MedicalWard", pK_MedicalWard);
            var iX_MedicalWard_MedicalCenterId = new TableIndex(
            "IX_MedicalWard_MedicalCenterId", medicalWardTable, new[] { medicalCenterIdColumn }, false);
            var iX_MedicalWard_MedicalCenterIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.MedicalWard",
                new[] { "MedicalCenterId" });
            iX_MedicalWard_MedicalCenterId.MappedIndexes.Add(iX_MedicalWard_MedicalCenterIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MedicalWard_MedicalCenterIdIx).Add(iX_MedicalWard_MedicalCenterId);
            medicalWardTable.Indexes.Add("IX_MedicalWard_MedicalCenterId", iX_MedicalWard_MedicalCenterId);
            var iX_MedicalWard_TypeId = new TableIndex(
            "IX_MedicalWard_TypeId", medicalWardTable, new[] { typeIdColumn0 }, false);
            var iX_MedicalWard_TypeIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.MedicalWard",
                new[] { "TypeId" });
            iX_MedicalWard_TypeId.MappedIndexes.Add(iX_MedicalWard_TypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MedicalWard_TypeIdIx).Add(iX_MedicalWard_TypeId);
            medicalWardTable.Indexes.Add("IX_MedicalWard_TypeId", iX_MedicalWard_TypeId);
            relationalModel.Tables.Add(("MedicalWard", null), medicalWardTable);
            var medicalWardTableMapping = new TableMapping(medicalWard, medicalWardTable, true);
            medicalWardTable.AddTypeMapping(medicalWardTableMapping, false);
            tableMappings11.Add(medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, medicalWard.FindProperty("Id")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn11, medicalWard.FindProperty("CreatedBy")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn11, medicalWard.FindProperty("DateTimeCreated")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn2, medicalWard.FindProperty("DateTimeModified")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn3, medicalWard.FindProperty("Description")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(medicalCenterIdColumn, medicalWard.FindProperty("MedicalCenterId")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn2, medicalWard.FindProperty("ModifiedBy")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn4, medicalWard.FindProperty("Name")!, medicalWardTableMapping);
            RelationalModel.CreateColumnMapping(typeIdColumn0, medicalWard.FindProperty("TypeId")!, medicalWardTableMapping);

            var medicine = FindEntityType("MedicalCenters.Domain.Entities.Medicines.Medicine")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            medicine.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var medicalCentersDomainEntitiesMedicinesMedicineTableBase = new TableBase("MedicalCenters.Domain.Entities.Medicines.Medicine", null, relationalModel);
            var createdByColumnBase12 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicinesMedicineTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("CreatedBy", createdByColumnBase12);
            var dateTimeCreatedColumnBase12 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicinesMedicineTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase12);
            var dateTimeModifiedColumnBase3 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesMedicinesMedicineTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase3);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicinesMedicineTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("Id", idColumnBase5);
            var modifiedByColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesMedicinesMedicineTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase3);
            var nameColumnBase5 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", medicalCentersDomainEntitiesMedicinesMedicineTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("Name", nameColumnBase5);
            var typeIdColumnBase1 = new ColumnBase<ColumnMappingBase>("TypeId", "int", medicalCentersDomainEntitiesMedicinesMedicineTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.Columns.Add("TypeId", typeIdColumnBase1);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Medicines.Medicine", medicalCentersDomainEntitiesMedicinesMedicineTableBase);
            var medicalCentersDomainEntitiesMedicinesMedicineMappingBase = new TableMappingBase<ColumnMappingBase>(medicine, medicalCentersDomainEntitiesMedicinesMedicineTableBase, true);
            medicalCentersDomainEntitiesMedicinesMedicineTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicinesMedicineMappingBase, false);
            defaultTableMappings12.Add(medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, medicine.FindProperty("Id")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase12, medicine.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase12, medicine.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase3, medicine.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase3, medicine.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase5, medicine.FindProperty("Name")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeIdColumnBase1, medicine.FindProperty("TypeId")!, medicalCentersDomainEntitiesMedicinesMedicineMappingBase);

            var tableMappings12 = new List<TableMapping>();
            medicine.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var medicineTable = new Table("Medicine", null, relationalModel);
            var idColumn5 = new Column("Id", "int", medicineTable);
            medicineTable.Columns.Add("Id", idColumn5);
            var createdByColumn12 = new Column("CreatedBy", "bigint", medicineTable);
            medicineTable.Columns.Add("CreatedBy", createdByColumn12);
            var dateTimeCreatedColumn12 = new Column("DateTimeCreated", "datetime2", medicineTable)
            {
                IsNullable = true
            };
            medicineTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn12);
            var dateTimeModifiedColumn3 = new Column("DateTimeModified", "datetime2", medicineTable)
            {
                IsNullable = true
            };
            medicineTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn3);
            var modifiedByColumn3 = new Column("ModifiedBy", "bigint", medicineTable);
            medicineTable.Columns.Add("ModifiedBy", modifiedByColumn3);
            var nameColumn5 = new Column("Name", "nvarchar(100)", medicineTable);
            medicineTable.Columns.Add("Name", nameColumn5);
            var typeIdColumn1 = new Column("TypeId", "int", medicineTable);
            medicineTable.Columns.Add("TypeId", typeIdColumn1);
            var pK_Medicine = new UniqueConstraint("PK_Medicine", medicineTable, new[] { idColumn5 });
            medicineTable.PrimaryKey = pK_Medicine;
            var pK_MedicineUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Medicines.Medicine",
                new[] { "Id" });
            pK_Medicine.MappedKeys.Add(pK_MedicineUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicineUc).Add(pK_Medicine);
            medicineTable.UniqueConstraints.Add("PK_Medicine", pK_Medicine);
            var iX_Medicine_TypeId = new TableIndex(
            "IX_Medicine_TypeId", medicineTable, new[] { typeIdColumn1 }, false);
            var iX_Medicine_TypeIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Medicines.Medicine",
                new[] { "TypeId" });
            iX_Medicine_TypeId.MappedIndexes.Add(iX_Medicine_TypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Medicine_TypeIdIx).Add(iX_Medicine_TypeId);
            medicineTable.Indexes.Add("IX_Medicine_TypeId", iX_Medicine_TypeId);
            relationalModel.Tables.Add(("Medicine", null), medicineTable);
            var medicineTableMapping = new TableMapping(medicine, medicineTable, true);
            medicineTable.AddTypeMapping(medicineTableMapping, false);
            tableMappings12.Add(medicineTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, medicine.FindProperty("Id")!, medicineTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn12, medicine.FindProperty("CreatedBy")!, medicineTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn12, medicine.FindProperty("DateTimeCreated")!, medicineTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn3, medicine.FindProperty("DateTimeModified")!, medicineTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn3, medicine.FindProperty("ModifiedBy")!, medicineTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn5, medicine.FindProperty("Name")!, medicineTableMapping);
            RelationalModel.CreateColumnMapping(typeIdColumn1, medicine.FindProperty("TypeId")!, medicineTableMapping);

            var medicineType = FindEntityType("MedicalCenters.Domain.Entities.Medicines.MedicineType")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            medicineType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase = new TableBase("MedicalCenters.Domain.Entities.Medicines.MedicineType", null, relationalModel);
            var createdByColumnBase13 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase.Columns.Add("CreatedBy", createdByColumnBase13);
            var dateTimeCreatedColumnBase13 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase13);
            var descriptionColumnBase4 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase.Columns.Add("Description", descriptionColumnBase4);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase.Columns.Add("Id", idColumnBase6);
            var nameColumnBase6 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase);
            medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase.Columns.Add("Name", nameColumnBase6);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Medicines.MedicineType", medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase);
            var medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase = new TableMappingBase<ColumnMappingBase>(medicineType, medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase, true);
            medicalCentersDomainEntitiesMedicinesMedicineTypeTableBase.AddTypeMapping(medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase, false);
            defaultTableMappings13.Add(medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, medicineType.FindProperty("Id")!, medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase13, medicineType.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase13, medicineType.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase4, medicineType.FindProperty("Description")!, medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase6, medicineType.FindProperty("Name")!, medicalCentersDomainEntitiesMedicinesMedicineTypeMappingBase);

            var tableMappings13 = new List<TableMapping>();
            medicineType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var medicineTypeTable = new Table("MedicineType", null, relationalModel);
            var idColumn6 = new Column("Id", "int", medicineTypeTable);
            medicineTypeTable.Columns.Add("Id", idColumn6);
            var createdByColumn13 = new Column("CreatedBy", "bigint", medicineTypeTable);
            medicineTypeTable.Columns.Add("CreatedBy", createdByColumn13);
            var dateTimeCreatedColumn13 = new Column("DateTimeCreated", "datetime2", medicineTypeTable)
            {
                IsNullable = true
            };
            medicineTypeTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn13);
            var descriptionColumn4 = new Column("Description", "nvarchar(1000)", medicineTypeTable);
            medicineTypeTable.Columns.Add("Description", descriptionColumn4);
            var nameColumn6 = new Column("Name", "nvarchar(100)", medicineTypeTable);
            medicineTypeTable.Columns.Add("Name", nameColumn6);
            var pK_MedicineType = new UniqueConstraint("PK_MedicineType", medicineTypeTable, new[] { idColumn6 });
            medicineTypeTable.PrimaryKey = pK_MedicineType;
            var pK_MedicineTypeUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Medicines.MedicineType",
                new[] { "Id" });
            pK_MedicineType.MappedKeys.Add(pK_MedicineTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MedicineTypeUc).Add(pK_MedicineType);
            medicineTypeTable.UniqueConstraints.Add("PK_MedicineType", pK_MedicineType);
            relationalModel.Tables.Add(("MedicineType", null), medicineTypeTable);
            var medicineTypeTableMapping = new TableMapping(medicineType, medicineTypeTable, true);
            medicineTypeTable.AddTypeMapping(medicineTypeTableMapping, false);
            tableMappings13.Add(medicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, medicineType.FindProperty("Id")!, medicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn13, medicineType.FindProperty("CreatedBy")!, medicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn13, medicineType.FindProperty("DateTimeCreated")!, medicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn4, medicineType.FindProperty("Description")!, medicineTypeTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn6, medicineType.FindProperty("Name")!, medicineTypeTableMapping);

            var operation = FindEntityType("MedicalCenters.Domain.Entities.Oprerations.Operation")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            operation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var medicalCentersDomainEntitiesOprerationsOperationTableBase = new TableBase("MedicalCenters.Domain.Entities.Oprerations.Operation", null, relationalModel);
            var createdByColumnBase14 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesOprerationsOperationTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("CreatedBy", createdByColumnBase14);
            var dateTimeCreatedColumnBase14 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesOprerationsOperationTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase14);
            var dateTimeModifiedColumnBase4 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesOprerationsOperationTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase4);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesOprerationsOperationTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("Id", idColumnBase7);
            var modifiedByColumnBase4 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesOprerationsOperationTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase4);
            var operationDTColumnBase = new ColumnBase<ColumnMappingBase>("OperationDT", "datetime2", medicalCentersDomainEntitiesOprerationsOperationTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("OperationDT", operationDTColumnBase);
            var operationTypeIdColumnBase = new ColumnBase<ColumnMappingBase>("OperationTypeId", "int", medicalCentersDomainEntitiesOprerationsOperationTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTableBase.Columns.Add("OperationTypeId", operationTypeIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Oprerations.Operation", medicalCentersDomainEntitiesOprerationsOperationTableBase);
            var medicalCentersDomainEntitiesOprerationsOperationMappingBase = new TableMappingBase<ColumnMappingBase>(operation, medicalCentersDomainEntitiesOprerationsOperationTableBase, true);
            medicalCentersDomainEntitiesOprerationsOperationTableBase.AddTypeMapping(medicalCentersDomainEntitiesOprerationsOperationMappingBase, false);
            defaultTableMappings14.Add(medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, operation.FindProperty("Id")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase14, operation.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase14, operation.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase4, operation.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase4, operation.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operationDTColumnBase, operation.FindProperty("OperationDT")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)operationTypeIdColumnBase, operation.FindProperty("OperationTypeId")!, medicalCentersDomainEntitiesOprerationsOperationMappingBase);

            var tableMappings14 = new List<TableMapping>();
            operation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var operationTable = new Table("Operation", null, relationalModel);
            var idColumn7 = new Column("Id", "bigint", operationTable);
            operationTable.Columns.Add("Id", idColumn7);
            var createdByColumn14 = new Column("CreatedBy", "bigint", operationTable);
            operationTable.Columns.Add("CreatedBy", createdByColumn14);
            var dateTimeCreatedColumn14 = new Column("DateTimeCreated", "datetime2", operationTable)
            {
                IsNullable = true
            };
            operationTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn14);
            var dateTimeModifiedColumn4 = new Column("DateTimeModified", "datetime2", operationTable)
            {
                IsNullable = true
            };
            operationTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn4);
            var modifiedByColumn4 = new Column("ModifiedBy", "bigint", operationTable);
            operationTable.Columns.Add("ModifiedBy", modifiedByColumn4);
            var operationDTColumn = new Column("OperationDT", "datetime2", operationTable);
            operationTable.Columns.Add("OperationDT", operationDTColumn);
            var operationTypeIdColumn = new Column("OperationTypeId", "int", operationTable);
            operationTable.Columns.Add("OperationTypeId", operationTypeIdColumn);
            var pK_Operation = new UniqueConstraint("PK_Operation", operationTable, new[] { idColumn7 });
            operationTable.PrimaryKey = pK_Operation;
            var pK_OperationUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Oprerations.Operation",
                new[] { "Id" });
            pK_Operation.MappedKeys.Add(pK_OperationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OperationUc).Add(pK_Operation);
            operationTable.UniqueConstraints.Add("PK_Operation", pK_Operation);
            var iX_Operation_OperationTypeId = new TableIndex(
            "IX_Operation_OperationTypeId", operationTable, new[] { operationTypeIdColumn }, false);
            var iX_Operation_OperationTypeIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Oprerations.Operation",
                new[] { "OperationTypeId" });
            iX_Operation_OperationTypeId.MappedIndexes.Add(iX_Operation_OperationTypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Operation_OperationTypeIdIx).Add(iX_Operation_OperationTypeId);
            operationTable.Indexes.Add("IX_Operation_OperationTypeId", iX_Operation_OperationTypeId);
            relationalModel.Tables.Add(("Operation", null), operationTable);
            var operationTableMapping = new TableMapping(operation, operationTable, true);
            operationTable.AddTypeMapping(operationTableMapping, false);
            tableMappings14.Add(operationTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, operation.FindProperty("Id")!, operationTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn14, operation.FindProperty("CreatedBy")!, operationTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn14, operation.FindProperty("DateTimeCreated")!, operationTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn4, operation.FindProperty("DateTimeModified")!, operationTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn4, operation.FindProperty("ModifiedBy")!, operationTableMapping);
            RelationalModel.CreateColumnMapping(operationDTColumn, operation.FindProperty("OperationDT")!, operationTableMapping);
            RelationalModel.CreateColumnMapping(operationTypeIdColumn, operation.FindProperty("OperationTypeId")!, operationTableMapping);

            var operationType = FindEntityType("MedicalCenters.Domain.Entities.Oprerations.OperationType")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            operationType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var medicalCentersDomainEntitiesOprerationsOperationTypeTableBase = new TableBase("MedicalCenters.Domain.Entities.Oprerations.OperationType", null, relationalModel);
            var createdByColumnBase15 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesOprerationsOperationTypeTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTypeTableBase.Columns.Add("CreatedBy", createdByColumnBase15);
            var dateTimeCreatedColumnBase15 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesOprerationsOperationTypeTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesOprerationsOperationTypeTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase15);
            var descriptionColumnBase5 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesOprerationsOperationTypeTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTypeTableBase.Columns.Add("Description", descriptionColumnBase5);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesOprerationsOperationTypeTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTypeTableBase.Columns.Add("Id", idColumnBase8);
            var nameColumnBase7 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(70)", medicalCentersDomainEntitiesOprerationsOperationTypeTableBase);
            medicalCentersDomainEntitiesOprerationsOperationTypeTableBase.Columns.Add("Name", nameColumnBase7);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Oprerations.OperationType", medicalCentersDomainEntitiesOprerationsOperationTypeTableBase);
            var medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase = new TableMappingBase<ColumnMappingBase>(operationType, medicalCentersDomainEntitiesOprerationsOperationTypeTableBase, true);
            medicalCentersDomainEntitiesOprerationsOperationTypeTableBase.AddTypeMapping(medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase, false);
            defaultTableMappings15.Add(medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, operationType.FindProperty("Id")!, medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase15, operationType.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase15, operationType.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase5, operationType.FindProperty("Description")!, medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase7, operationType.FindProperty("Name")!, medicalCentersDomainEntitiesOprerationsOperationTypeMappingBase);

            var tableMappings15 = new List<TableMapping>();
            operationType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var operationTypeTable = new Table("OperationType", null, relationalModel);
            var idColumn8 = new Column("Id", "int", operationTypeTable);
            operationTypeTable.Columns.Add("Id", idColumn8);
            var createdByColumn15 = new Column("CreatedBy", "bigint", operationTypeTable);
            operationTypeTable.Columns.Add("CreatedBy", createdByColumn15);
            var dateTimeCreatedColumn15 = new Column("DateTimeCreated", "datetime2", operationTypeTable)
            {
                IsNullable = true
            };
            operationTypeTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn15);
            var descriptionColumn5 = new Column("Description", "nvarchar(1000)", operationTypeTable);
            operationTypeTable.Columns.Add("Description", descriptionColumn5);
            var nameColumn7 = new Column("Name", "nvarchar(70)", operationTypeTable);
            operationTypeTable.Columns.Add("Name", nameColumn7);
            var pK_OperationType = new UniqueConstraint("PK_OperationType", operationTypeTable, new[] { idColumn8 });
            operationTypeTable.PrimaryKey = pK_OperationType;
            var pK_OperationTypeUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Oprerations.OperationType",
                new[] { "Id" });
            pK_OperationType.MappedKeys.Add(pK_OperationTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OperationTypeUc).Add(pK_OperationType);
            operationTypeTable.UniqueConstraints.Add("PK_OperationType", pK_OperationType);
            relationalModel.Tables.Add(("OperationType", null), operationTypeTable);
            var operationTypeTableMapping = new TableMapping(operationType, operationTypeTable, true);
            operationTypeTable.AddTypeMapping(operationTypeTableMapping, false);
            tableMappings15.Add(operationTypeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, operationType.FindProperty("Id")!, operationTypeTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn15, operationType.FindProperty("CreatedBy")!, operationTypeTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn15, operationType.FindProperty("DateTimeCreated")!, operationTypeTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn5, operationType.FindProperty("Description")!, operationTypeTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn7, operationType.FindProperty("Name")!, operationTypeTableMapping);

            var patientHistory = FindEntityType("MedicalCenters.Domain.Entities.PatientHistory")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            patientHistory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var medicalCentersDomainEntitiesPatientHistoryTableBase = new TableBase("MedicalCenters.Domain.Entities.PatientHistory", null, relationalModel);
            var createdByColumnBase16 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesPatientHistoryTableBase);
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("CreatedBy", createdByColumnBase16);
            var dateTimeCreatedColumnBase16 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesPatientHistoryTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase16);
            var dateTimeModifiedColumnBase5 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesPatientHistoryTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase5);
            var doctorIdColumnBase2 = new ColumnBase<ColumnMappingBase>("DoctorId", "int", medicalCentersDomainEntitiesPatientHistoryTableBase);
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("DoctorId", doctorIdColumnBase2);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesPatientHistoryTableBase);
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("Id", idColumnBase9);
            var modifiedByColumnBase5 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesPatientHistoryTableBase);
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase5);
            var patientIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PatientId", "bigint", medicalCentersDomainEntitiesPatientHistoryTableBase);
            medicalCentersDomainEntitiesPatientHistoryTableBase.Columns.Add("PatientId", patientIdColumnBase0);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.PatientHistory", medicalCentersDomainEntitiesPatientHistoryTableBase);
            var medicalCentersDomainEntitiesPatientHistoryMappingBase = new TableMappingBase<ColumnMappingBase>(patientHistory, medicalCentersDomainEntitiesPatientHistoryTableBase, true);
            medicalCentersDomainEntitiesPatientHistoryTableBase.AddTypeMapping(medicalCentersDomainEntitiesPatientHistoryMappingBase, false);
            defaultTableMappings16.Add(medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, patientHistory.FindProperty("Id")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase16, patientHistory.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase16, patientHistory.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase5, patientHistory.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doctorIdColumnBase2, patientHistory.FindProperty("DoctorId")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase5, patientHistory.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)patientIdColumnBase0, patientHistory.FindProperty("PatientId")!, medicalCentersDomainEntitiesPatientHistoryMappingBase);

            var tableMappings16 = new List<TableMapping>();
            patientHistory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var patientHistoryTable = new Table("PatientHistory", null, relationalModel);
            var idColumn9 = new Column("Id", "bigint", patientHistoryTable);
            patientHistoryTable.Columns.Add("Id", idColumn9);
            var createdByColumn16 = new Column("CreatedBy", "bigint", patientHistoryTable);
            patientHistoryTable.Columns.Add("CreatedBy", createdByColumn16);
            var dateTimeCreatedColumn16 = new Column("DateTimeCreated", "datetime2", patientHistoryTable)
            {
                IsNullable = true
            };
            patientHistoryTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn16);
            var dateTimeModifiedColumn5 = new Column("DateTimeModified", "datetime2", patientHistoryTable)
            {
                IsNullable = true
            };
            patientHistoryTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn5);
            var doctorIdColumn2 = new Column("DoctorId", "int", patientHistoryTable);
            patientHistoryTable.Columns.Add("DoctorId", doctorIdColumn2);
            var modifiedByColumn5 = new Column("ModifiedBy", "bigint", patientHistoryTable);
            patientHistoryTable.Columns.Add("ModifiedBy", modifiedByColumn5);
            var patientIdColumn0 = new Column("PatientId", "bigint", patientHistoryTable);
            patientHistoryTable.Columns.Add("PatientId", patientIdColumn0);
            var pK_PatientHistory = new UniqueConstraint("PK_PatientHistory", patientHistoryTable, new[] { idColumn9 });
            patientHistoryTable.PrimaryKey = pK_PatientHistory;
            var pK_PatientHistoryUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.PatientHistory",
                new[] { "Id" });
            pK_PatientHistory.MappedKeys.Add(pK_PatientHistoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PatientHistoryUc).Add(pK_PatientHistory);
            patientHistoryTable.UniqueConstraints.Add("PK_PatientHistory", pK_PatientHistory);
            var iX_PatientHistory_DoctorId = new TableIndex(
            "IX_PatientHistory_DoctorId", patientHistoryTable, new[] { doctorIdColumn2 }, false);
            var iX_PatientHistory_DoctorIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.PatientHistory",
                new[] { "DoctorId" });
            iX_PatientHistory_DoctorId.MappedIndexes.Add(iX_PatientHistory_DoctorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PatientHistory_DoctorIdIx).Add(iX_PatientHistory_DoctorId);
            patientHistoryTable.Indexes.Add("IX_PatientHistory_DoctorId", iX_PatientHistory_DoctorId);
            var iX_PatientHistory_PatientId = new TableIndex(
            "IX_PatientHistory_PatientId", patientHistoryTable, new[] { patientIdColumn0 }, false);
            var iX_PatientHistory_PatientIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.PatientHistory",
                new[] { "PatientId" });
            iX_PatientHistory_PatientId.MappedIndexes.Add(iX_PatientHistory_PatientIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PatientHistory_PatientIdIx).Add(iX_PatientHistory_PatientId);
            patientHistoryTable.Indexes.Add("IX_PatientHistory_PatientId", iX_PatientHistory_PatientId);
            relationalModel.Tables.Add(("PatientHistory", null), patientHistoryTable);
            var patientHistoryTableMapping = new TableMapping(patientHistory, patientHistoryTable, true);
            patientHistoryTable.AddTypeMapping(patientHistoryTableMapping, false);
            tableMappings16.Add(patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, patientHistory.FindProperty("Id")!, patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn16, patientHistory.FindProperty("CreatedBy")!, patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn16, patientHistory.FindProperty("DateTimeCreated")!, patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn5, patientHistory.FindProperty("DateTimeModified")!, patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(doctorIdColumn2, patientHistory.FindProperty("DoctorId")!, patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn5, patientHistory.FindProperty("ModifiedBy")!, patientHistoryTableMapping);
            RelationalModel.CreateColumnMapping(patientIdColumn0, patientHistory.FindProperty("PatientId")!, patientHistoryTableMapping);

            var patient = FindEntityType("MedicalCenters.Domain.Entities.Persons.Patient")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            patient.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var medicalCentersDomainEntitiesPersonsPatientTableBase = new TableBase("MedicalCenters.Domain.Entities.Persons.Patient", null, relationalModel);
            var createdByColumnBase17 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesPersonsPatientTableBase);
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("CreatedBy", createdByColumnBase17);
            var dateTimeCreatedColumnBase17 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesPersonsPatientTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase17);
            var dateTimeModifiedColumnBase6 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesPersonsPatientTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase6);
            var firstNameColumnBase = new ColumnBase<ColumnMappingBase>("FirstName", "nvarchar(50)", medicalCentersDomainEntitiesPersonsPatientTableBase);
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("FirstName", firstNameColumnBase);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesPersonsPatientTableBase);
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("Id", idColumnBase10);
            var lastNameColumnBase = new ColumnBase<ColumnMappingBase>("LastName", "nvarchar(50)", medicalCentersDomainEntitiesPersonsPatientTableBase);
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("LastName", lastNameColumnBase);
            var modifiedByColumnBase6 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesPersonsPatientTableBase);
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase6);
            var nationalCodeColumnBase = new ColumnBase<ColumnMappingBase>("NationalCode", "nvarchar(20)", medicalCentersDomainEntitiesPersonsPatientTableBase);
            medicalCentersDomainEntitiesPersonsPatientTableBase.Columns.Add("NationalCode", nationalCodeColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Persons.Patient", medicalCentersDomainEntitiesPersonsPatientTableBase);
            var medicalCentersDomainEntitiesPersonsPatientMappingBase = new TableMappingBase<ColumnMappingBase>(patient, medicalCentersDomainEntitiesPersonsPatientTableBase, true);
            medicalCentersDomainEntitiesPersonsPatientTableBase.AddTypeMapping(medicalCentersDomainEntitiesPersonsPatientMappingBase, false);
            defaultTableMappings17.Add(medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, patient.FindProperty("Id")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase17, patient.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase17, patient.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase6, patient.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase, patient.FindProperty("FirstName")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase, patient.FindProperty("LastName")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase6, patient.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nationalCodeColumnBase, patient.FindProperty("NationalCode")!, medicalCentersDomainEntitiesPersonsPatientMappingBase);

            var tableMappings17 = new List<TableMapping>();
            patient.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var patientTable = new Table("Patient", null, relationalModel);
            var idColumn10 = new Column("Id", "bigint", patientTable);
            patientTable.Columns.Add("Id", idColumn10);
            var createdByColumn17 = new Column("CreatedBy", "bigint", patientTable);
            patientTable.Columns.Add("CreatedBy", createdByColumn17);
            var dateTimeCreatedColumn17 = new Column("DateTimeCreated", "datetime2", patientTable)
            {
                IsNullable = true
            };
            patientTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn17);
            var dateTimeModifiedColumn6 = new Column("DateTimeModified", "datetime2", patientTable)
            {
                IsNullable = true
            };
            patientTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn6);
            var firstNameColumn = new Column("FirstName", "nvarchar(50)", patientTable);
            patientTable.Columns.Add("FirstName", firstNameColumn);
            var lastNameColumn = new Column("LastName", "nvarchar(50)", patientTable);
            patientTable.Columns.Add("LastName", lastNameColumn);
            var modifiedByColumn6 = new Column("ModifiedBy", "bigint", patientTable);
            patientTable.Columns.Add("ModifiedBy", modifiedByColumn6);
            var nationalCodeColumn = new Column("NationalCode", "nvarchar(20)", patientTable);
            patientTable.Columns.Add("NationalCode", nationalCodeColumn);
            var pK_Patient = new UniqueConstraint("PK_Patient", patientTable, new[] { idColumn10 });
            patientTable.PrimaryKey = pK_Patient;
            var pK_PatientUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Persons.Patient",
                new[] { "Id" });
            pK_Patient.MappedKeys.Add(pK_PatientUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PatientUc).Add(pK_Patient);
            patientTable.UniqueConstraints.Add("PK_Patient", pK_Patient);
            relationalModel.Tables.Add(("Patient", null), patientTable);
            var patientTableMapping = new TableMapping(patient, patientTable, true);
            patientTable.AddTypeMapping(patientTableMapping, false);
            tableMappings17.Add(patientTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, patient.FindProperty("Id")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn17, patient.FindProperty("CreatedBy")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn17, patient.FindProperty("DateTimeCreated")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn6, patient.FindProperty("DateTimeModified")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(firstNameColumn, patient.FindProperty("FirstName")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(lastNameColumn, patient.FindProperty("LastName")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn6, patient.FindProperty("ModifiedBy")!, patientTableMapping);
            RelationalModel.CreateColumnMapping(nationalCodeColumn, patient.FindProperty("NationalCode")!, patientTableMapping);

            var personnel = FindEntityType("MedicalCenters.Domain.Entities.Persons.Personnel")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            personnel.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var medicalCentersDomainEntitiesPersonsPersonnelTableBase = new TableBase("MedicalCenters.Domain.Entities.Persons.Personnel", null, relationalModel);
            var createdByColumnBase18 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("CreatedBy", createdByColumnBase18);
            var dateTimeCreatedColumnBase18 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesPersonsPersonnelTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase18);
            var dateTimeModifiedColumnBase7 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesPersonsPersonnelTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase7);
            var firstNameColumnBase0 = new ColumnBase<ColumnMappingBase>("FirstName", "nvarchar(50)", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("FirstName", firstNameColumnBase0);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("Id", idColumnBase11);
            var lastNameColumnBase0 = new ColumnBase<ColumnMappingBase>("LastName", "nvarchar(50)", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("LastName", lastNameColumnBase0);
            var modifiedByColumnBase7 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase7);
            var nationalCodeColumnBase0 = new ColumnBase<ColumnMappingBase>("NationalCode", "nvarchar(20)", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("NationalCode", nationalCodeColumnBase0);
            var personnelCodeColumnBase = new ColumnBase<ColumnMappingBase>("PersonnelCode", "nvarchar(50)", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.Columns.Add("PersonnelCode", personnelCodeColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Persons.Personnel", medicalCentersDomainEntitiesPersonsPersonnelTableBase);
            var medicalCentersDomainEntitiesPersonsPersonnelMappingBase = new TableMappingBase<ColumnMappingBase>(personnel, medicalCentersDomainEntitiesPersonsPersonnelTableBase, true);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.AddTypeMapping(medicalCentersDomainEntitiesPersonsPersonnelMappingBase, false);
            defaultTableMappings18.Add(medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, personnel.FindProperty("Id")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase18, personnel.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase18, personnel.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase7, personnel.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase0, personnel.FindProperty("FirstName")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase0, personnel.FindProperty("LastName")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase7, personnel.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nationalCodeColumnBase0, personnel.FindProperty("NationalCode")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)personnelCodeColumnBase, personnel.FindProperty("PersonnelCode")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase);

            var tableMappings18 = new List<TableMapping>();
            personnel.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var personnelTable = new Table("Personnel", null, relationalModel);
            var idColumn11 = new Column("Id", "int", personnelTable);
            personnelTable.Columns.Add("Id", idColumn11);
            var createdByColumn18 = new Column("CreatedBy", "bigint", personnelTable);
            personnelTable.Columns.Add("CreatedBy", createdByColumn18);
            var dateTimeCreatedColumn18 = new Column("DateTimeCreated", "datetime2", personnelTable)
            {
                IsNullable = true
            };
            personnelTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn18);
            var dateTimeModifiedColumn7 = new Column("DateTimeModified", "datetime2", personnelTable)
            {
                IsNullable = true
            };
            personnelTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn7);
            var firstNameColumn0 = new Column("FirstName", "nvarchar(50)", personnelTable);
            personnelTable.Columns.Add("FirstName", firstNameColumn0);
            var lastNameColumn0 = new Column("LastName", "nvarchar(50)", personnelTable);
            personnelTable.Columns.Add("LastName", lastNameColumn0);
            var modifiedByColumn7 = new Column("ModifiedBy", "bigint", personnelTable);
            personnelTable.Columns.Add("ModifiedBy", modifiedByColumn7);
            var nationalCodeColumn0 = new Column("NationalCode", "nvarchar(20)", personnelTable);
            personnelTable.Columns.Add("NationalCode", nationalCodeColumn0);
            var personnelCodeColumn = new Column("PersonnelCode", "nvarchar(50)", personnelTable);
            personnelTable.Columns.Add("PersonnelCode", personnelCodeColumn);
            var pK_Personnel = new UniqueConstraint("PK_Personnel", personnelTable, new[] { idColumn11 });
            personnelTable.PrimaryKey = pK_Personnel;
            var pK_PersonnelUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            pK_Personnel.MappedKeys.Add(pK_PersonnelUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PersonnelUc).Add(pK_Personnel);
            personnelTable.UniqueConstraints.Add("PK_Personnel", pK_Personnel);
            relationalModel.Tables.Add(("Personnel", null), personnelTable);
            var personnelTableMapping = new TableMapping(personnel, personnelTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            personnelTable.AddTypeMapping(personnelTableMapping, false);
            tableMappings18.Add(personnelTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, personnel.FindProperty("Id")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn18, personnel.FindProperty("CreatedBy")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn18, personnel.FindProperty("DateTimeCreated")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn7, personnel.FindProperty("DateTimeModified")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(firstNameColumn0, personnel.FindProperty("FirstName")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(lastNameColumn0, personnel.FindProperty("LastName")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn7, personnel.FindProperty("ModifiedBy")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(nationalCodeColumn0, personnel.FindProperty("NationalCode")!, personnelTableMapping);
            RelationalModel.CreateColumnMapping(personnelCodeColumn, personnel.FindProperty("PersonnelCode")!, personnelTableMapping);

            var doctor = FindEntityType("MedicalCenters.Domain.Entities.Persons.Staffs.Doctor")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            doctor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var medicalCentersDomainEntitiesPersonsPersonnelMappingBase0 = new TableMappingBase<ColumnMappingBase>(doctor, medicalCentersDomainEntitiesPersonsPersonnelTableBase, false);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.AddTypeMapping(medicalCentersDomainEntitiesPersonsPersonnelMappingBase0, false);
            defaultTableMappings19.Add(medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, doctor.FindProperty("Id")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase18, doctor.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase18, doctor.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase7, doctor.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase0, doctor.FindProperty("FirstName")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase0, doctor.FindProperty("LastName")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase7, doctor.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nationalCodeColumnBase0, doctor.FindProperty("NationalCode")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)personnelCodeColumnBase, doctor.FindProperty("PersonnelCode")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase0);

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            doctor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var medicalCentersDomainEntitiesPersonsStaffsDoctorTableBase = new TableBase("MedicalCenters.Domain.Entities.Persons.Staffs.Doctor", null, relationalModel);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesPersonsStaffsDoctorTableBase);
            medicalCentersDomainEntitiesPersonsStaffsDoctorTableBase.Columns.Add("Id", idColumnBase12);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Persons.Staffs.Doctor", medicalCentersDomainEntitiesPersonsStaffsDoctorTableBase);
            var medicalCentersDomainEntitiesPersonsStaffsDoctorMappingBase = new TableMappingBase<ColumnMappingBase>(doctor, medicalCentersDomainEntitiesPersonsStaffsDoctorTableBase, true);
            medicalCentersDomainEntitiesPersonsStaffsDoctorTableBase.AddTypeMapping(medicalCentersDomainEntitiesPersonsStaffsDoctorMappingBase, false);
            defaultTableMappings20.Add(medicalCentersDomainEntitiesPersonsStaffsDoctorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, doctor.FindProperty("Id")!, medicalCentersDomainEntitiesPersonsStaffsDoctorMappingBase);

            var tableMappings19 = new List<TableMapping>();
            doctor.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var personnelTableMapping0 = new TableMapping(doctor, personnelTable, false)
            {
                IsSharedTablePrincipal = false,
            };
            personnelTable.AddTypeMapping(personnelTableMapping0, false);
            tableMappings19.Add(personnelTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn11, doctor.FindProperty("Id")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(createdByColumn18, doctor.FindProperty("CreatedBy")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn18, doctor.FindProperty("DateTimeCreated")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn7, doctor.FindProperty("DateTimeModified")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(firstNameColumn0, doctor.FindProperty("FirstName")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(lastNameColumn0, doctor.FindProperty("LastName")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(modifiedByColumn7, doctor.FindProperty("ModifiedBy")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(nationalCodeColumn0, doctor.FindProperty("NationalCode")!, personnelTableMapping0);
            RelationalModel.CreateColumnMapping(personnelCodeColumn, doctor.FindProperty("PersonnelCode")!, personnelTableMapping0);
            var doctorTable = new Table("Doctor", null, relationalModel);
            var idColumn12 = new Column("Id", "int", doctorTable);
            doctorTable.Columns.Add("Id", idColumn12);
            var pK_Doctor = new UniqueConstraint("PK_Doctor", doctorTable, new[] { idColumn12 });
            doctorTable.PrimaryKey = pK_Doctor;
            var pK_DoctorUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            pK_Doctor.MappedKeys.Add(pK_DoctorUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DoctorUc).Add(pK_Doctor);
            doctorTable.UniqueConstraints.Add("PK_Doctor", pK_Doctor);
            relationalModel.Tables.Add(("Doctor", null), doctorTable);
            var doctorTableMapping = new TableMapping(doctor, doctorTable, true);
            doctorTable.AddTypeMapping(doctorTableMapping, false);
            tableMappings19.Add(doctorTableMapping);
            RelationalModel.CreateColumnMapping(idColumn12, doctor.FindProperty("Id")!, doctorTableMapping);

            var nurse = FindEntityType("MedicalCenters.Domain.Entities.Persons.Staffs.Nurse")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            nurse.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var medicalCentersDomainEntitiesPersonsPersonnelMappingBase1 = new TableMappingBase<ColumnMappingBase>(nurse, medicalCentersDomainEntitiesPersonsPersonnelTableBase, false);
            medicalCentersDomainEntitiesPersonsPersonnelTableBase.AddTypeMapping(medicalCentersDomainEntitiesPersonsPersonnelMappingBase1, false);
            defaultTableMappings21.Add(medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, nurse.FindProperty("Id")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase18, nurse.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase18, nurse.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase7, nurse.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase0, nurse.FindProperty("FirstName")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase0, nurse.FindProperty("LastName")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase7, nurse.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nationalCodeColumnBase0, nurse.FindProperty("NationalCode")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)personnelCodeColumnBase, nurse.FindProperty("PersonnelCode")!, medicalCentersDomainEntitiesPersonsPersonnelMappingBase1);

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            nurse.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var medicalCentersDomainEntitiesPersonsStaffsNurseTableBase = new TableBase("MedicalCenters.Domain.Entities.Persons.Staffs.Nurse", null, relationalModel);
            var idColumnBase13 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesPersonsStaffsNurseTableBase);
            medicalCentersDomainEntitiesPersonsStaffsNurseTableBase.Columns.Add("Id", idColumnBase13);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Persons.Staffs.Nurse", medicalCentersDomainEntitiesPersonsStaffsNurseTableBase);
            var medicalCentersDomainEntitiesPersonsStaffsNurseMappingBase = new TableMappingBase<ColumnMappingBase>(nurse, medicalCentersDomainEntitiesPersonsStaffsNurseTableBase, true);
            medicalCentersDomainEntitiesPersonsStaffsNurseTableBase.AddTypeMapping(medicalCentersDomainEntitiesPersonsStaffsNurseMappingBase, false);
            defaultTableMappings22.Add(medicalCentersDomainEntitiesPersonsStaffsNurseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase13, nurse.FindProperty("Id")!, medicalCentersDomainEntitiesPersonsStaffsNurseMappingBase);

            var tableMappings20 = new List<TableMapping>();
            nurse.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var personnelTableMapping1 = new TableMapping(nurse, personnelTable, false)
            {
                IsSharedTablePrincipal = false,
            };
            personnelTable.AddTypeMapping(personnelTableMapping1, false);
            tableMappings20.Add(personnelTableMapping1);
            RelationalModel.CreateColumnMapping(idColumn11, nurse.FindProperty("Id")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(createdByColumn18, nurse.FindProperty("CreatedBy")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn18, nurse.FindProperty("DateTimeCreated")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn7, nurse.FindProperty("DateTimeModified")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(firstNameColumn0, nurse.FindProperty("FirstName")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(lastNameColumn0, nurse.FindProperty("LastName")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(modifiedByColumn7, nurse.FindProperty("ModifiedBy")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(nationalCodeColumn0, nurse.FindProperty("NationalCode")!, personnelTableMapping1);
            RelationalModel.CreateColumnMapping(personnelCodeColumn, nurse.FindProperty("PersonnelCode")!, personnelTableMapping1);
            var nurseTable = new Table("Nurse", null, relationalModel);
            var idColumn13 = new Column("Id", "int", nurseTable);
            nurseTable.Columns.Add("Id", idColumn13);
            var pK_Nurse = new UniqueConstraint("PK_Nurse", nurseTable, new[] { idColumn13 });
            nurseTable.PrimaryKey = pK_Nurse;
            var pK_NurseUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            pK_Nurse.MappedKeys.Add(pK_NurseUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_NurseUc).Add(pK_Nurse);
            nurseTable.UniqueConstraints.Add("PK_Nurse", pK_Nurse);
            relationalModel.Tables.Add(("Nurse", null), nurseTable);
            var nurseTableMapping = new TableMapping(nurse, nurseTable, true);
            nurseTable.AddTypeMapping(nurseTableMapping, false);
            tableMappings20.Add(nurseTableMapping);
            RelationalModel.CreateColumnMapping(idColumn13, nurse.FindProperty("Id")!, nurseTableMapping);

            var reservation = FindEntityType("MedicalCenters.Domain.Entities.Reservation")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            reservation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var medicalCentersDomainEntitiesReservationTableBase = new TableBase("MedicalCenters.Domain.Entities.Reservation", null, relationalModel);
            var createdByColumnBase19 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesReservationTableBase);
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("CreatedBy", createdByColumnBase19);
            var dateTimeCreatedColumnBase19 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesReservationTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase19);
            var dateTimeModifiedColumnBase8 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesReservationTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase8);
            var idColumnBase14 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesReservationTableBase);
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("Id", idColumnBase14);
            var modifiedByColumnBase8 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesReservationTableBase);
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase8);
            var patientIdColumnBase1 = new ColumnBase<ColumnMappingBase>("PatientId", "bigint", medicalCentersDomainEntitiesReservationTableBase);
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("PatientId", patientIdColumnBase1);
            var reservationDTColumnBase = new ColumnBase<ColumnMappingBase>("ReservationDT", "datetime2", medicalCentersDomainEntitiesReservationTableBase);
            medicalCentersDomainEntitiesReservationTableBase.Columns.Add("ReservationDT", reservationDTColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Reservation", medicalCentersDomainEntitiesReservationTableBase);
            var medicalCentersDomainEntitiesReservationMappingBase = new TableMappingBase<ColumnMappingBase>(reservation, medicalCentersDomainEntitiesReservationTableBase, true);
            medicalCentersDomainEntitiesReservationTableBase.AddTypeMapping(medicalCentersDomainEntitiesReservationMappingBase, false);
            defaultTableMappings23.Add(medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase14, reservation.FindProperty("Id")!, medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase19, reservation.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase19, reservation.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase8, reservation.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase8, reservation.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)patientIdColumnBase1, reservation.FindProperty("PatientId")!, medicalCentersDomainEntitiesReservationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reservationDTColumnBase, reservation.FindProperty("ReservationDT")!, medicalCentersDomainEntitiesReservationMappingBase);

            var tableMappings21 = new List<TableMapping>();
            reservation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings21);
            var reservationTable = new Table("Reservation", null, relationalModel);
            var idColumn14 = new Column("Id", "bigint", reservationTable);
            reservationTable.Columns.Add("Id", idColumn14);
            var createdByColumn19 = new Column("CreatedBy", "bigint", reservationTable);
            reservationTable.Columns.Add("CreatedBy", createdByColumn19);
            var dateTimeCreatedColumn19 = new Column("DateTimeCreated", "datetime2", reservationTable)
            {
                IsNullable = true
            };
            reservationTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn19);
            var dateTimeModifiedColumn8 = new Column("DateTimeModified", "datetime2", reservationTable)
            {
                IsNullable = true
            };
            reservationTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn8);
            var modifiedByColumn8 = new Column("ModifiedBy", "bigint", reservationTable);
            reservationTable.Columns.Add("ModifiedBy", modifiedByColumn8);
            var patientIdColumn1 = new Column("PatientId", "bigint", reservationTable);
            reservationTable.Columns.Add("PatientId", patientIdColumn1);
            var reservationDTColumn = new Column("ReservationDT", "datetime2", reservationTable);
            reservationTable.Columns.Add("ReservationDT", reservationDTColumn);
            var pK_Reservation = new UniqueConstraint("PK_Reservation", reservationTable, new[] { idColumn14 });
            reservationTable.PrimaryKey = pK_Reservation;
            var pK_ReservationUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Reservation",
                new[] { "Id" });
            pK_Reservation.MappedKeys.Add(pK_ReservationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReservationUc).Add(pK_Reservation);
            reservationTable.UniqueConstraints.Add("PK_Reservation", pK_Reservation);
            var iX_Reservation_PatientId = new TableIndex(
            "IX_Reservation_PatientId", reservationTable, new[] { patientIdColumn1 }, false);
            var iX_Reservation_PatientIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Reservation",
                new[] { "PatientId" });
            iX_Reservation_PatientId.MappedIndexes.Add(iX_Reservation_PatientIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reservation_PatientIdIx).Add(iX_Reservation_PatientId);
            reservationTable.Indexes.Add("IX_Reservation_PatientId", iX_Reservation_PatientId);
            relationalModel.Tables.Add(("Reservation", null), reservationTable);
            var reservationTableMapping = new TableMapping(reservation, reservationTable, true);
            reservationTable.AddTypeMapping(reservationTableMapping, false);
            tableMappings21.Add(reservationTableMapping);
            RelationalModel.CreateColumnMapping(idColumn14, reservation.FindProperty("Id")!, reservationTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn19, reservation.FindProperty("CreatedBy")!, reservationTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn19, reservation.FindProperty("DateTimeCreated")!, reservationTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn8, reservation.FindProperty("DateTimeModified")!, reservationTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn8, reservation.FindProperty("ModifiedBy")!, reservationTableMapping);
            RelationalModel.CreateColumnMapping(patientIdColumn1, reservation.FindProperty("PatientId")!, reservationTableMapping);
            RelationalModel.CreateColumnMapping(reservationDTColumn, reservation.FindProperty("ReservationDT")!, reservationTableMapping);

            var shift = FindEntityType("MedicalCenters.Domain.Entities.Shifts.Shift")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            shift.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var medicalCentersDomainEntitiesShiftsShiftTableBase = new TableBase("MedicalCenters.Domain.Entities.Shifts.Shift", null, relationalModel);
            var createdByColumnBase20 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesShiftsShiftTableBase);
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("CreatedBy", createdByColumnBase20);
            var dateTimeCreatedColumnBase20 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesShiftsShiftTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase20);
            var dateTimeModifiedColumnBase9 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesShiftsShiftTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase9);
            var idColumnBase15 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesShiftsShiftTableBase);
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("Id", idColumnBase15);
            var modifiedByColumnBase9 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesShiftsShiftTableBase);
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase9);
            var PersonnelIdColumnBase = new ColumnBase<ColumnMappingBase>("PersonnelId", "int", medicalCentersDomainEntitiesShiftsShiftTableBase);
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("PersonnelId", PersonnelIdColumnBase);
            var shiftPlanIdColumnBase = new ColumnBase<ColumnMappingBase>("ShiftPlanId", "bigint", medicalCentersDomainEntitiesShiftsShiftTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("ShiftPlanId", shiftPlanIdColumnBase);
            var unitIdColumnBase = new ColumnBase<ColumnMappingBase>("UnitId", "int", medicalCentersDomainEntitiesShiftsShiftTableBase);
            medicalCentersDomainEntitiesShiftsShiftTableBase.Columns.Add("UnitId", unitIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Shifts.Shift", medicalCentersDomainEntitiesShiftsShiftTableBase);
            var medicalCentersDomainEntitiesShiftsShiftMappingBase = new TableMappingBase<ColumnMappingBase>(shift, medicalCentersDomainEntitiesShiftsShiftTableBase, true);
            medicalCentersDomainEntitiesShiftsShiftTableBase.AddTypeMapping(medicalCentersDomainEntitiesShiftsShiftMappingBase, false);
            defaultTableMappings24.Add(medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase15, shift.FindProperty("Id")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase20, shift.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase20, shift.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase9, shift.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase9, shift.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)PersonnelIdColumnBase, shift.FindProperty("PersonnelId")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shiftPlanIdColumnBase, shift.FindProperty("ShiftPlanId")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitIdColumnBase, shift.FindProperty("UnitId")!, medicalCentersDomainEntitiesShiftsShiftMappingBase);

            var tableMappings22 = new List<TableMapping>();
            shift.SetRuntimeAnnotation("Relational:TableMappings", tableMappings22);
            var shiftTable = new Table("Shift", null, relationalModel);
            var idColumn15 = new Column("Id", "bigint", shiftTable);
            shiftTable.Columns.Add("Id", idColumn15);
            var createdByColumn20 = new Column("CreatedBy", "bigint", shiftTable);
            shiftTable.Columns.Add("CreatedBy", createdByColumn20);
            var dateTimeCreatedColumn20 = new Column("DateTimeCreated", "datetime2", shiftTable)
            {
                IsNullable = true
            };
            shiftTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn20);
            var dateTimeModifiedColumn9 = new Column("DateTimeModified", "datetime2", shiftTable)
            {
                IsNullable = true
            };
            shiftTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn9);
            var modifiedByColumn9 = new Column("ModifiedBy", "bigint", shiftTable);
            shiftTable.Columns.Add("ModifiedBy", modifiedByColumn9);
            var PersonnelIdColumn = new Column("PersonnelId", "int", shiftTable);
            shiftTable.Columns.Add("PersonnelId", PersonnelIdColumn);
            var shiftPlanIdColumn = new Column("ShiftPlanId", "bigint", shiftTable)
            {
                IsNullable = true
            };
            shiftTable.Columns.Add("ShiftPlanId", shiftPlanIdColumn);
            var unitIdColumn = new Column("UnitId", "int", shiftTable);
            shiftTable.Columns.Add("UnitId", unitIdColumn);
            var pK_Shift = new UniqueConstraint("PK_Shift", shiftTable, new[] { idColumn15 });
            shiftTable.PrimaryKey = pK_Shift;
            var pK_ShiftUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "Id" });
            pK_Shift.MappedKeys.Add(pK_ShiftUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ShiftUc).Add(pK_Shift);
            shiftTable.UniqueConstraints.Add("PK_Shift", pK_Shift);
            var iX_Shift_PersonnelId = new TableIndex(
            "IX_Shift_PersonnelId", shiftTable, new[] { PersonnelIdColumn }, false);
            var iX_Shift_PersonnelIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "PersonnelId" });
            iX_Shift_PersonnelId.MappedIndexes.Add(iX_Shift_PersonnelIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Shift_PersonnelIdIx).Add(iX_Shift_PersonnelId);
            shiftTable.Indexes.Add("IX_Shift_PersonnelId", iX_Shift_PersonnelId);
            var iX_Shift_ShiftPlanId = new TableIndex(
            "IX_Shift_ShiftPlanId", shiftTable, new[] { shiftPlanIdColumn }, false);
            var iX_Shift_ShiftPlanIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "ShiftPlanId" });
            iX_Shift_ShiftPlanId.MappedIndexes.Add(iX_Shift_ShiftPlanIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Shift_ShiftPlanIdIx).Add(iX_Shift_ShiftPlanId);
            shiftTable.Indexes.Add("IX_Shift_ShiftPlanId", iX_Shift_ShiftPlanId);
            var iX_Shift_UnitId = new TableIndex(
            "IX_Shift_UnitId", shiftTable, new[] { unitIdColumn }, false);
            var iX_Shift_UnitIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "UnitId" });
            iX_Shift_UnitId.MappedIndexes.Add(iX_Shift_UnitIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Shift_UnitIdIx).Add(iX_Shift_UnitId);
            shiftTable.Indexes.Add("IX_Shift_UnitId", iX_Shift_UnitId);
            relationalModel.Tables.Add(("Shift", null), shiftTable);
            var shiftTableMapping = new TableMapping(shift, shiftTable, true);
            shiftTable.AddTypeMapping(shiftTableMapping, false);
            tableMappings22.Add(shiftTableMapping);
            RelationalModel.CreateColumnMapping(idColumn15, shift.FindProperty("Id")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn20, shift.FindProperty("CreatedBy")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn20, shift.FindProperty("DateTimeCreated")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn9, shift.FindProperty("DateTimeModified")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn9, shift.FindProperty("ModifiedBy")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(PersonnelIdColumn, shift.FindProperty("PersonnelId")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(shiftPlanIdColumn, shift.FindProperty("ShiftPlanId")!, shiftTableMapping);
            RelationalModel.CreateColumnMapping(unitIdColumn, shift.FindProperty("UnitId")!, shiftTableMapping);

            var shiftPlan = FindEntityType("MedicalCenters.Domain.Entities.Shifts.ShiftPlan")!;

            var defaultTableMappings25 = new List<TableMappingBase<ColumnMappingBase>>();
            shiftPlan.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings25);
            var medicalCentersDomainEntitiesShiftsShiftPlanTableBase = new TableBase("MedicalCenters.Domain.Entities.Shifts.ShiftPlan", null, relationalModel);
            var createdByColumnBase21 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesShiftsShiftPlanTableBase);
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("CreatedBy", createdByColumnBase21);
            var dateTimeCreatedColumnBase21 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesShiftsShiftPlanTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase21);
            var dateTimeModifiedColumnBase10 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesShiftsShiftPlanTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase10);
            var idColumnBase16 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesShiftsShiftPlanTableBase);
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("Id", idColumnBase16);
            var medicalUnitIdColumnBase = new ColumnBase<ColumnMappingBase>("MedicalUnitId", "int", medicalCentersDomainEntitiesShiftsShiftPlanTableBase);
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("MedicalUnitId", medicalUnitIdColumnBase);
            var modifiedByColumnBase10 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesShiftsShiftPlanTableBase);
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase10);
            var PersonnelIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PersonnelId", "int", medicalCentersDomainEntitiesShiftsShiftPlanTableBase);
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.Columns.Add("PersonnelId", PersonnelIdColumnBase0);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Shifts.ShiftPlan", medicalCentersDomainEntitiesShiftsShiftPlanTableBase);
            var medicalCentersDomainEntitiesShiftsShiftPlanMappingBase = new TableMappingBase<ColumnMappingBase>(shiftPlan, medicalCentersDomainEntitiesShiftsShiftPlanTableBase, true);
            medicalCentersDomainEntitiesShiftsShiftPlanTableBase.AddTypeMapping(medicalCentersDomainEntitiesShiftsShiftPlanMappingBase, false);
            defaultTableMappings25.Add(medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase16, shiftPlan.FindProperty("Id")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase21, shiftPlan.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase21, shiftPlan.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase10, shiftPlan.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)medicalUnitIdColumnBase, shiftPlan.FindProperty("MedicalUnitId")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase10, shiftPlan.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)PersonnelIdColumnBase0, shiftPlan.FindProperty("PersonnelId")!, medicalCentersDomainEntitiesShiftsShiftPlanMappingBase);

            var tableMappings23 = new List<TableMapping>();
            shiftPlan.SetRuntimeAnnotation("Relational:TableMappings", tableMappings23);
            var shiftPlanTable = new Table("ShiftPlan", null, relationalModel);
            var idColumn16 = new Column("Id", "bigint", shiftPlanTable);
            shiftPlanTable.Columns.Add("Id", idColumn16);
            var createdByColumn21 = new Column("CreatedBy", "bigint", shiftPlanTable);
            shiftPlanTable.Columns.Add("CreatedBy", createdByColumn21);
            var dateTimeCreatedColumn21 = new Column("DateTimeCreated", "datetime2", shiftPlanTable)
            {
                IsNullable = true
            };
            shiftPlanTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn21);
            var dateTimeModifiedColumn10 = new Column("DateTimeModified", "datetime2", shiftPlanTable)
            {
                IsNullable = true
            };
            shiftPlanTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn10);
            var medicalUnitIdColumn = new Column("MedicalUnitId", "int", shiftPlanTable);
            shiftPlanTable.Columns.Add("MedicalUnitId", medicalUnitIdColumn);
            var modifiedByColumn10 = new Column("ModifiedBy", "bigint", shiftPlanTable);
            shiftPlanTable.Columns.Add("ModifiedBy", modifiedByColumn10);
            var PersonnelIdColumn0 = new Column("PersonnelId", "int", shiftPlanTable);
            shiftPlanTable.Columns.Add("PersonnelId", PersonnelIdColumn0);
            var pK_ShiftPlan = new UniqueConstraint("PK_ShiftPlan", shiftPlanTable, new[] { idColumn16 });
            shiftPlanTable.PrimaryKey = pK_ShiftPlan;
            var pK_ShiftPlanUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Shifts.ShiftPlan",
                new[] { "Id" });
            pK_ShiftPlan.MappedKeys.Add(pK_ShiftPlanUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ShiftPlanUc).Add(pK_ShiftPlan);
            shiftPlanTable.UniqueConstraints.Add("PK_ShiftPlan", pK_ShiftPlan);
            var iX_ShiftPlan_MedicalUnitId = new TableIndex(
            "IX_ShiftPlan_MedicalUnitId", shiftPlanTable, new[] { medicalUnitIdColumn }, false);
            var iX_ShiftPlan_MedicalUnitIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Shifts.ShiftPlan",
                new[] { "MedicalUnitId" });
            iX_ShiftPlan_MedicalUnitId.MappedIndexes.Add(iX_ShiftPlan_MedicalUnitIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ShiftPlan_MedicalUnitIdIx).Add(iX_ShiftPlan_MedicalUnitId);
            shiftPlanTable.Indexes.Add("IX_ShiftPlan_MedicalUnitId", iX_ShiftPlan_MedicalUnitId);
            var iX_ShiftPlan_PersonnelId = new TableIndex(
            "IX_ShiftPlan_PersonnelId", shiftPlanTable, new[] { PersonnelIdColumn0 }, false);
            var iX_ShiftPlan_PersonnelIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Shifts.ShiftPlan",
                new[] { "PersonnelId" });
            iX_ShiftPlan_PersonnelId.MappedIndexes.Add(iX_ShiftPlan_PersonnelIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ShiftPlan_PersonnelIdIx).Add(iX_ShiftPlan_PersonnelId);
            shiftPlanTable.Indexes.Add("IX_ShiftPlan_PersonnelId", iX_ShiftPlan_PersonnelId);
            relationalModel.Tables.Add(("ShiftPlan", null), shiftPlanTable);
            var shiftPlanTableMapping = new TableMapping(shiftPlan, shiftPlanTable, true);
            shiftPlanTable.AddTypeMapping(shiftPlanTableMapping, false);
            tableMappings23.Add(shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(idColumn16, shiftPlan.FindProperty("Id")!, shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn21, shiftPlan.FindProperty("CreatedBy")!, shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn21, shiftPlan.FindProperty("DateTimeCreated")!, shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn10, shiftPlan.FindProperty("DateTimeModified")!, shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(medicalUnitIdColumn, shiftPlan.FindProperty("MedicalUnitId")!, shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn10, shiftPlan.FindProperty("ModifiedBy")!, shiftPlanTableMapping);
            RelationalModel.CreateColumnMapping(PersonnelIdColumn0, shiftPlan.FindProperty("PersonnelId")!, shiftPlanTableMapping);

            var specialty = FindEntityType("MedicalCenters.Domain.Entities.Specialties.Specialty")!;

            var defaultTableMappings26 = new List<TableMappingBase<ColumnMappingBase>>();
            specialty.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings26);
            var medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase = new TableBase("MedicalCenters.Domain.Entities.Specialties.Specialty", null, relationalModel);
            var createdByColumnBase22 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.Columns.Add("CreatedBy", createdByColumnBase22);
            var dateTimeCreatedColumnBase22 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase22);
            var descriptionColumnBase6 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.Columns.Add("Description", descriptionColumnBase6);
            var idColumnBase17 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.Columns.Add("Id", idColumnBase17);
            var nameColumnBase8 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.Columns.Add("Name", nameColumnBase8);
            var specialtyGroupIdColumnBase = new ColumnBase<ColumnMappingBase>("SpecialtyGroupId", "int", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.Columns.Add("SpecialtyGroupId", specialtyGroupIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Specialties.Specialty", medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase);
            var medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase = new TableMappingBase<ColumnMappingBase>(specialty, medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase, true);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyTableBase.AddTypeMapping(medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase, false);
            defaultTableMappings26.Add(medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase17, specialty.FindProperty("Id")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase22, specialty.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase22, specialty.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase6, specialty.FindProperty("Description")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase8, specialty.FindProperty("Name")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)specialtyGroupIdColumnBase, specialty.FindProperty("SpecialtyGroupId")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyMappingBase);

            var tableMappings24 = new List<TableMapping>();
            specialty.SetRuntimeAnnotation("Relational:TableMappings", tableMappings24);
            var specialtyTable = new Table("Specialty", null, relationalModel);
            var idColumn17 = new Column("Id", "int", specialtyTable);
            specialtyTable.Columns.Add("Id", idColumn17);
            var createdByColumn22 = new Column("CreatedBy", "bigint", specialtyTable);
            specialtyTable.Columns.Add("CreatedBy", createdByColumn22);
            var dateTimeCreatedColumn22 = new Column("DateTimeCreated", "datetime2", specialtyTable)
            {
                IsNullable = true
            };
            specialtyTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn22);
            var descriptionColumn6 = new Column("Description", "nvarchar(1000)", specialtyTable);
            specialtyTable.Columns.Add("Description", descriptionColumn6);
            var nameColumn8 = new Column("Name", "nvarchar(100)", specialtyTable);
            specialtyTable.Columns.Add("Name", nameColumn8);
            var specialtyGroupIdColumn = new Column("SpecialtyGroupId", "int", specialtyTable);
            specialtyTable.Columns.Add("SpecialtyGroupId", specialtyGroupIdColumn);
            var pK_Specialty = new UniqueConstraint("PK_Specialty", specialtyTable, new[] { idColumn17 });
            specialtyTable.PrimaryKey = pK_Specialty;
            var pK_SpecialtyUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Specialties.Specialty",
                new[] { "Id" });
            pK_Specialty.MappedKeys.Add(pK_SpecialtyUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpecialtyUc).Add(pK_Specialty);
            specialtyTable.UniqueConstraints.Add("PK_Specialty", pK_Specialty);
            var iX_Specialty_SpecialtyGroupId = new TableIndex(
            "IX_Specialty_SpecialtyGroupId", specialtyTable, new[] { specialtyGroupIdColumn }, false);
            var iX_Specialty_SpecialtyGroupIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Specialties.Specialty",
                new[] { "SpecialtyGroupId" });
            iX_Specialty_SpecialtyGroupId.MappedIndexes.Add(iX_Specialty_SpecialtyGroupIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Specialty_SpecialtyGroupIdIx).Add(iX_Specialty_SpecialtyGroupId);
            specialtyTable.Indexes.Add("IX_Specialty_SpecialtyGroupId", iX_Specialty_SpecialtyGroupId);
            relationalModel.Tables.Add(("Specialty", null), specialtyTable);
            var specialtyTableMapping = new TableMapping(specialty, specialtyTable, true);
            specialtyTable.AddTypeMapping(specialtyTableMapping, false);
            tableMappings24.Add(specialtyTableMapping);
            RelationalModel.CreateColumnMapping(idColumn17, specialty.FindProperty("Id")!, specialtyTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn22, specialty.FindProperty("CreatedBy")!, specialtyTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn22, specialty.FindProperty("DateTimeCreated")!, specialtyTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn6, specialty.FindProperty("Description")!, specialtyTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn8, specialty.FindProperty("Name")!, specialtyTableMapping);
            RelationalModel.CreateColumnMapping(specialtyGroupIdColumn, specialty.FindProperty("SpecialtyGroupId")!, specialtyTableMapping);

            var specialtyGroup = FindEntityType("MedicalCenters.Domain.Entities.Specialties.SpecialtyGroup")!;

            var defaultTableMappings27 = new List<TableMappingBase<ColumnMappingBase>>();
            specialtyGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings27);
            var medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase = new TableBase("MedicalCenters.Domain.Entities.Specialties.SpecialtyGroup", null, relationalModel);
            var createdByColumnBase23 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase.Columns.Add("CreatedBy", createdByColumnBase23);
            var dateTimeCreatedColumnBase23 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase23);
            var descriptionColumnBase7 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase.Columns.Add("Description", descriptionColumnBase7);
            var idColumnBase18 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase.Columns.Add("Id", idColumnBase18);
            var nameColumnBase9 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase.Columns.Add("Name", nameColumnBase9);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Specialties.SpecialtyGroup", medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase);
            var medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase = new TableMappingBase<ColumnMappingBase>(specialtyGroup, medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase, true);
            medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupTableBase.AddTypeMapping(medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase, false);
            defaultTableMappings27.Add(medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase18, specialtyGroup.FindProperty("Id")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase23, specialtyGroup.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase23, specialtyGroup.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase7, specialtyGroup.FindProperty("Description")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase9, specialtyGroup.FindProperty("Name")!, medicalCentersDomainEntitiesSpecialtiesSpecialtyGroupMappingBase);

            var tableMappings25 = new List<TableMapping>();
            specialtyGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings25);
            var specialtyGroupTable = new Table("SpecialtyGroup", null, relationalModel);
            var idColumn18 = new Column("Id", "int", specialtyGroupTable);
            specialtyGroupTable.Columns.Add("Id", idColumn18);
            var createdByColumn23 = new Column("CreatedBy", "bigint", specialtyGroupTable);
            specialtyGroupTable.Columns.Add("CreatedBy", createdByColumn23);
            var dateTimeCreatedColumn23 = new Column("DateTimeCreated", "datetime2", specialtyGroupTable)
            {
                IsNullable = true
            };
            specialtyGroupTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn23);
            var descriptionColumn7 = new Column("Description", "nvarchar(1000)", specialtyGroupTable);
            specialtyGroupTable.Columns.Add("Description", descriptionColumn7);
            var nameColumn9 = new Column("Name", "nvarchar(100)", specialtyGroupTable);
            specialtyGroupTable.Columns.Add("Name", nameColumn9);
            var pK_SpecialtyGroup = new UniqueConstraint("PK_SpecialtyGroup", specialtyGroupTable, new[] { idColumn18 });
            specialtyGroupTable.PrimaryKey = pK_SpecialtyGroup;
            var pK_SpecialtyGroupUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Specialties.SpecialtyGroup",
                new[] { "Id" });
            pK_SpecialtyGroup.MappedKeys.Add(pK_SpecialtyGroupUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpecialtyGroupUc).Add(pK_SpecialtyGroup);
            specialtyGroupTable.UniqueConstraints.Add("PK_SpecialtyGroup", pK_SpecialtyGroup);
            relationalModel.Tables.Add(("SpecialtyGroup", null), specialtyGroupTable);
            var specialtyGroupTableMapping = new TableMapping(specialtyGroup, specialtyGroupTable, true);
            specialtyGroupTable.AddTypeMapping(specialtyGroupTableMapping, false);
            tableMappings25.Add(specialtyGroupTableMapping);
            RelationalModel.CreateColumnMapping(idColumn18, specialtyGroup.FindProperty("Id")!, specialtyGroupTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn23, specialtyGroup.FindProperty("CreatedBy")!, specialtyGroupTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn23, specialtyGroup.FindProperty("DateTimeCreated")!, specialtyGroupTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn7, specialtyGroup.FindProperty("Description")!, specialtyGroupTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn9, specialtyGroup.FindProperty("Name")!, specialtyGroupTableMapping);

            var visit = FindEntityType("MedicalCenters.Domain.Entities.Visit")!;

            var defaultTableMappings28 = new List<TableMappingBase<ColumnMappingBase>>();
            visit.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings28);
            var medicalCentersDomainEntitiesVisitTableBase = new TableBase("MedicalCenters.Domain.Entities.Visit", null, relationalModel);
            var createdByColumnBase24 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersDomainEntitiesVisitTableBase);
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("CreatedBy", createdByColumnBase24);
            var dateTimeColumnBase = new ColumnBase<ColumnMappingBase>("DateTime", "datetime2", medicalCentersDomainEntitiesVisitTableBase);
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("DateTime", dateTimeColumnBase);
            var dateTimeCreatedColumnBase24 = new ColumnBase<ColumnMappingBase>("DateTimeCreated", "datetime2", medicalCentersDomainEntitiesVisitTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("DateTimeCreated", dateTimeCreatedColumnBase24);
            var dateTimeModifiedColumnBase11 = new ColumnBase<ColumnMappingBase>("DateTimeModified", "datetime2", medicalCentersDomainEntitiesVisitTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("DateTimeModified", dateTimeModifiedColumnBase11);
            var idColumnBase19 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersDomainEntitiesVisitTableBase);
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("Id", idColumnBase19);
            var modifiedByColumnBase11 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersDomainEntitiesVisitTableBase);
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase11);
            var patientIdColumnBase2 = new ColumnBase<ColumnMappingBase>("PatientId", "bigint", medicalCentersDomainEntitiesVisitTableBase);
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("PatientId", patientIdColumnBase2);
            var reservationIdColumnBase = new ColumnBase<ColumnMappingBase>("ReservationId", "bigint", medicalCentersDomainEntitiesVisitTableBase)
            {
                IsNullable = true
            };
            medicalCentersDomainEntitiesVisitTableBase.Columns.Add("ReservationId", reservationIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Domain.Entities.Visit", medicalCentersDomainEntitiesVisitTableBase);
            var medicalCentersDomainEntitiesVisitMappingBase = new TableMappingBase<ColumnMappingBase>(visit, medicalCentersDomainEntitiesVisitTableBase, true);
            medicalCentersDomainEntitiesVisitTableBase.AddTypeMapping(medicalCentersDomainEntitiesVisitMappingBase, false);
            defaultTableMappings28.Add(medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase19, visit.FindProperty("Id")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase24, visit.FindProperty("CreatedBy")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase, visit.FindProperty("DateTime")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeCreatedColumnBase24, visit.FindProperty("DateTimeCreated")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeModifiedColumnBase11, visit.FindProperty("DateTimeModified")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase11, visit.FindProperty("ModifiedBy")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)patientIdColumnBase2, visit.FindProperty("PatientId")!, medicalCentersDomainEntitiesVisitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reservationIdColumnBase, visit.FindProperty("ReservationId")!, medicalCentersDomainEntitiesVisitMappingBase);

            var tableMappings26 = new List<TableMapping>();
            visit.SetRuntimeAnnotation("Relational:TableMappings", tableMappings26);
            var visitTable = new Table("Visit", null, relationalModel);
            var idColumn19 = new Column("Id", "bigint", visitTable);
            visitTable.Columns.Add("Id", idColumn19);
            var createdByColumn24 = new Column("CreatedBy", "bigint", visitTable);
            visitTable.Columns.Add("CreatedBy", createdByColumn24);
            var dateTimeColumn = new Column("DateTime", "datetime2", visitTable);
            visitTable.Columns.Add("DateTime", dateTimeColumn);
            var dateTimeCreatedColumn24 = new Column("DateTimeCreated", "datetime2", visitTable)
            {
                IsNullable = true
            };
            visitTable.Columns.Add("DateTimeCreated", dateTimeCreatedColumn24);
            var dateTimeModifiedColumn11 = new Column("DateTimeModified", "datetime2", visitTable)
            {
                IsNullable = true
            };
            visitTable.Columns.Add("DateTimeModified", dateTimeModifiedColumn11);
            var modifiedByColumn11 = new Column("ModifiedBy", "bigint", visitTable);
            visitTable.Columns.Add("ModifiedBy", modifiedByColumn11);
            var patientIdColumn2 = new Column("PatientId", "bigint", visitTable);
            visitTable.Columns.Add("PatientId", patientIdColumn2);
            var reservationIdColumn = new Column("ReservationId", "bigint", visitTable)
            {
                IsNullable = true
            };
            visitTable.Columns.Add("ReservationId", reservationIdColumn);
            var pK_Visit = new UniqueConstraint("PK_Visit", visitTable, new[] { idColumn19 });
            visitTable.PrimaryKey = pK_Visit;
            var pK_VisitUc = RelationalModel.GetKey(this,
                "MedicalCenters.Domain.Entities.Visit",
                new[] { "Id" });
            pK_Visit.MappedKeys.Add(pK_VisitUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VisitUc).Add(pK_Visit);
            visitTable.UniqueConstraints.Add("PK_Visit", pK_Visit);
            var iX_Visit_PatientId = new TableIndex(
            "IX_Visit_PatientId", visitTable, new[] { patientIdColumn2 }, false);
            var iX_Visit_PatientIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Visit",
                new[] { "PatientId" });
            iX_Visit_PatientId.MappedIndexes.Add(iX_Visit_PatientIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Visit_PatientIdIx).Add(iX_Visit_PatientId);
            visitTable.Indexes.Add("IX_Visit_PatientId", iX_Visit_PatientId);
            var iX_Visit_ReservationId = new TableIndex(
            "IX_Visit_ReservationId", visitTable, new[] { reservationIdColumn }, false);
            var iX_Visit_ReservationIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Domain.Entities.Visit",
                new[] { "ReservationId" });
            iX_Visit_ReservationId.MappedIndexes.Add(iX_Visit_ReservationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Visit_ReservationIdIx).Add(iX_Visit_ReservationId);
            visitTable.Indexes.Add("IX_Visit_ReservationId", iX_Visit_ReservationId);
            relationalModel.Tables.Add(("Visit", null), visitTable);
            var visitTableMapping = new TableMapping(visit, visitTable, true);
            visitTable.AddTypeMapping(visitTableMapping, false);
            tableMappings26.Add(visitTableMapping);
            RelationalModel.CreateColumnMapping(idColumn19, visit.FindProperty("Id")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn24, visit.FindProperty("CreatedBy")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn, visit.FindProperty("DateTime")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeCreatedColumn24, visit.FindProperty("DateTimeCreated")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeModifiedColumn11, visit.FindProperty("DateTimeModified")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn11, visit.FindProperty("ModifiedBy")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(patientIdColumn2, visit.FindProperty("PatientId")!, visitTableMapping);
            RelationalModel.CreateColumnMapping(reservationIdColumn, visit.FindProperty("ReservationId")!, visitTableMapping);
            var fK_Allergy_MedicineType_Allergy_AllergyId = new ForeignKeyConstraint(
                "FK_Allergy_MedicineType_Allergy_AllergyId", allergy_MedicineTypeTable, allergyTable,
                new[] { allergyIdColumn },
                allergyTable.FindUniqueConstraint("PK_Allergy")!, ReferentialAction.Cascade);
            var fK_Allergy_MedicineType_Allergy_AllergyIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType",
                new[] { "AllergyId" },
                "MedicalCenters.Domain.Entities.Allergy",
                new[] { "Id" });
            fK_Allergy_MedicineType_Allergy_AllergyId.MappedForeignKeys.Add(fK_Allergy_MedicineType_Allergy_AllergyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Allergy_MedicineType_Allergy_AllergyIdFk).Add(fK_Allergy_MedicineType_Allergy_AllergyId);
            allergy_MedicineTypeTable.ForeignKeyConstraints.Add(fK_Allergy_MedicineType_Allergy_AllergyId);
            allergyTable.ReferencingForeignKeyConstraints.Add(fK_Allergy_MedicineType_Allergy_AllergyId);
            var fK_Allergy_MedicineType_MedicineType_MedicineTypeId = new ForeignKeyConstraint(
                "FK_Allergy_MedicineType_MedicineType_MedicineTypeId", allergy_MedicineTypeTable, medicineTypeTable,
                new[] { medicineTypeIdColumn },
                medicineTypeTable.FindUniqueConstraint("PK_MedicineType")!, ReferentialAction.Cascade);
            var fK_Allergy_MedicineType_MedicineType_MedicineTypeIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_MedicineType",
                new[] { "MedicineTypeId" },
                "MedicalCenters.Domain.Entities.Medicines.MedicineType",
                new[] { "Id" });
            fK_Allergy_MedicineType_MedicineType_MedicineTypeId.MappedForeignKeys.Add(fK_Allergy_MedicineType_MedicineType_MedicineTypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Allergy_MedicineType_MedicineType_MedicineTypeIdFk).Add(fK_Allergy_MedicineType_MedicineType_MedicineTypeId);
            allergy_MedicineTypeTable.ForeignKeyConstraints.Add(fK_Allergy_MedicineType_MedicineType_MedicineTypeId);
            medicineTypeTable.ReferencingForeignKeyConstraints.Add(fK_Allergy_MedicineType_MedicineType_MedicineTypeId);
            var fK_Allergy_Patient_Allergy_AllergyId = new ForeignKeyConstraint(
                "FK_Allergy_Patient_Allergy_AllergyId", allergy_PatientTable, allergyTable,
                new[] { allergyIdColumn0 },
                allergyTable.FindUniqueConstraint("PK_Allergy")!, ReferentialAction.Cascade);
            var fK_Allergy_Patient_Allergy_AllergyIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient",
                new[] { "AllergyId" },
                "MedicalCenters.Domain.Entities.Allergy",
                new[] { "Id" });
            fK_Allergy_Patient_Allergy_AllergyId.MappedForeignKeys.Add(fK_Allergy_Patient_Allergy_AllergyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Allergy_Patient_Allergy_AllergyIdFk).Add(fK_Allergy_Patient_Allergy_AllergyId);
            allergy_PatientTable.ForeignKeyConstraints.Add(fK_Allergy_Patient_Allergy_AllergyId);
            allergyTable.ReferencingForeignKeyConstraints.Add(fK_Allergy_Patient_Allergy_AllergyId);
            var fK_Allergy_Patient_Patient_PatientId = new ForeignKeyConstraint(
                "FK_Allergy_Patient_Patient_PatientId", allergy_PatientTable, patientTable,
                new[] { patientIdColumn },
                patientTable.FindUniqueConstraint("PK_Patient")!, ReferentialAction.Cascade);
            var fK_Allergy_Patient_Patient_PatientIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Allergy_Patient",
                new[] { "PatientId" },
                "MedicalCenters.Domain.Entities.Persons.Patient",
                new[] { "Id" });
            fK_Allergy_Patient_Patient_PatientId.MappedForeignKeys.Add(fK_Allergy_Patient_Patient_PatientIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Allergy_Patient_Patient_PatientIdFk).Add(fK_Allergy_Patient_Patient_PatientId);
            allergy_PatientTable.ForeignKeyConstraints.Add(fK_Allergy_Patient_Patient_PatientId);
            patientTable.ReferencingForeignKeyConstraints.Add(fK_Allergy_Patient_Patient_PatientId);
            var fK_Doctor_Personnel_Id = new ForeignKeyConstraint(
                "FK_Doctor_Personnel_Id", doctorTable, personnelTable,
                new[] { idColumn12 },
                personnelTable.FindUniqueConstraint("PK_Personnel")!, ReferentialAction.Cascade);
            var fK_Doctor_Personnel_IdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Persons.Staffs.Doctor",
                new[] { "Id" },
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            fK_Doctor_Personnel_Id.MappedForeignKeys.Add(fK_Doctor_Personnel_IdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Personnel_IdFk).Add(fK_Doctor_Personnel_Id);
            doctorTable.ForeignKeyConstraints.Add(fK_Doctor_Personnel_Id);
            personnelTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Personnel_Id);
            var fK_Doctor_Operation_Doctor_DoctorId = new ForeignKeyConstraint(
                "FK_Doctor_Operation_Doctor_DoctorId", doctor_OperationTable, doctorTable,
                new[] { doctorIdColumn },
                doctorTable.FindUniqueConstraint("PK_Doctor")!, ReferentialAction.Cascade);
            var fK_Doctor_Operation_Doctor_DoctorIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation",
                new[] { "DoctorId" },
                "MedicalCenters.Domain.Entities.Persons.Staffs.Doctor",
                new[] { "Id" });
            fK_Doctor_Operation_Doctor_DoctorId.MappedForeignKeys.Add(fK_Doctor_Operation_Doctor_DoctorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Operation_Doctor_DoctorIdFk).Add(fK_Doctor_Operation_Doctor_DoctorId);
            doctor_OperationTable.ForeignKeyConstraints.Add(fK_Doctor_Operation_Doctor_DoctorId);
            doctorTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Operation_Doctor_DoctorId);
            var fK_Doctor_Operation_Operation_OperationId = new ForeignKeyConstraint(
                "FK_Doctor_Operation_Operation_OperationId", doctor_OperationTable, operationTable,
                new[] { operationIdColumn },
                operationTable.FindUniqueConstraint("PK_Operation")!, ReferentialAction.Cascade);
            var fK_Doctor_Operation_Operation_OperationIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Operation",
                new[] { "OperationId" },
                "MedicalCenters.Domain.Entities.Oprerations.Operation",
                new[] { "Id" });
            fK_Doctor_Operation_Operation_OperationId.MappedForeignKeys.Add(fK_Doctor_Operation_Operation_OperationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Operation_Operation_OperationIdFk).Add(fK_Doctor_Operation_Operation_OperationId);
            doctor_OperationTable.ForeignKeyConstraints.Add(fK_Doctor_Operation_Operation_OperationId);
            operationTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Operation_Operation_OperationId);
            var fK_Doctor_Specialty_Doctor_DoctorId = new ForeignKeyConstraint(
                "FK_Doctor_Specialty_Doctor_DoctorId", doctor_SpecialtyTable, doctorTable,
                new[] { doctorIdColumn0 },
                doctorTable.FindUniqueConstraint("PK_Doctor")!, ReferentialAction.Cascade);
            var fK_Doctor_Specialty_Doctor_DoctorIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty",
                new[] { "DoctorId" },
                "MedicalCenters.Domain.Entities.Persons.Staffs.Doctor",
                new[] { "Id" });
            fK_Doctor_Specialty_Doctor_DoctorId.MappedForeignKeys.Add(fK_Doctor_Specialty_Doctor_DoctorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Specialty_Doctor_DoctorIdFk).Add(fK_Doctor_Specialty_Doctor_DoctorId);
            doctor_SpecialtyTable.ForeignKeyConstraints.Add(fK_Doctor_Specialty_Doctor_DoctorId);
            doctorTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Specialty_Doctor_DoctorId);
            var fK_Doctor_Specialty_Specialty_SpecialtyId = new ForeignKeyConstraint(
                "FK_Doctor_Specialty_Specialty_SpecialtyId", doctor_SpecialtyTable, specialtyTable,
                new[] { specialtyIdColumn },
                specialtyTable.FindUniqueConstraint("PK_Specialty")!, ReferentialAction.Cascade);
            var fK_Doctor_Specialty_Specialty_SpecialtyIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Specialty",
                new[] { "SpecialtyId" },
                "MedicalCenters.Domain.Entities.Specialties.Specialty",
                new[] { "Id" });
            fK_Doctor_Specialty_Specialty_SpecialtyId.MappedForeignKeys.Add(fK_Doctor_Specialty_Specialty_SpecialtyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Specialty_Specialty_SpecialtyIdFk).Add(fK_Doctor_Specialty_Specialty_SpecialtyId);
            doctor_SpecialtyTable.ForeignKeyConstraints.Add(fK_Doctor_Specialty_Specialty_SpecialtyId);
            specialtyTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Specialty_Specialty_SpecialtyId);
            var fK_Doctor_Visit_Doctor_DoctorId = new ForeignKeyConstraint(
                "FK_Doctor_Visit_Doctor_DoctorId", doctor_VisitTable, doctorTable,
                new[] { doctorIdColumn1 },
                doctorTable.FindUniqueConstraint("PK_Doctor")!, ReferentialAction.Cascade);
            var fK_Doctor_Visit_Doctor_DoctorIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit",
                new[] { "DoctorId" },
                "MedicalCenters.Domain.Entities.Persons.Staffs.Doctor",
                new[] { "Id" });
            fK_Doctor_Visit_Doctor_DoctorId.MappedForeignKeys.Add(fK_Doctor_Visit_Doctor_DoctorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Visit_Doctor_DoctorIdFk).Add(fK_Doctor_Visit_Doctor_DoctorId);
            doctor_VisitTable.ForeignKeyConstraints.Add(fK_Doctor_Visit_Doctor_DoctorId);
            doctorTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Visit_Doctor_DoctorId);
            var fK_Doctor_Visit_Visit_VisitId = new ForeignKeyConstraint(
                "FK_Doctor_Visit_Visit_VisitId", doctor_VisitTable, visitTable,
                new[] { visitIdColumn },
                visitTable.FindUniqueConstraint("PK_Visit")!, ReferentialAction.Cascade);
            var fK_Doctor_Visit_Visit_VisitIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Doctor_Visit",
                new[] { "VisitId" },
                "MedicalCenters.Domain.Entities.Visit",
                new[] { "Id" });
            fK_Doctor_Visit_Visit_VisitId.MappedForeignKeys.Add(fK_Doctor_Visit_Visit_VisitIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Doctor_Visit_Visit_VisitIdFk).Add(fK_Doctor_Visit_Visit_VisitId);
            doctor_VisitTable.ForeignKeyConstraints.Add(fK_Doctor_Visit_Visit_VisitId);
            visitTable.ReferencingForeignKeyConstraints.Add(fK_Doctor_Visit_Visit_VisitId);
            var fK_MedicalCenter_MedicalCenterType_TypeId = new ForeignKeyConstraint(
                "FK_MedicalCenter_MedicalCenterType_TypeId", medicalCenterTable, medicalCenterTypeTable,
                new[] { typeIdColumn },
                medicalCenterTypeTable.FindUniqueConstraint("PK_MedicalCenterType")!, ReferentialAction.Cascade);
            var fK_MedicalCenter_MedicalCenterType_TypeIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.MedicalCenter",
                new[] { "TypeId" },
                "MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalCenterType",
                new[] { "Id" });
            fK_MedicalCenter_MedicalCenterType_TypeId.MappedForeignKeys.Add(fK_MedicalCenter_MedicalCenterType_TypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MedicalCenter_MedicalCenterType_TypeIdFk).Add(fK_MedicalCenter_MedicalCenterType_TypeId);
            medicalCenterTable.ForeignKeyConstraints.Add(fK_MedicalCenter_MedicalCenterType_TypeId);
            medicalCenterTypeTable.ReferencingForeignKeyConstraints.Add(fK_MedicalCenter_MedicalCenterType_TypeId);
            var fK_MedicalWard_MedicalCenter_MedicalCenterId = new ForeignKeyConstraint(
                "FK_MedicalWard_MedicalCenter_MedicalCenterId", medicalWardTable, medicalCenterTable,
                new[] { medicalCenterIdColumn },
                medicalCenterTable.FindUniqueConstraint("PK_MedicalCenter")!, ReferentialAction.Cascade);
            var fK_MedicalWard_MedicalCenter_MedicalCenterIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.MedicalWard",
                new[] { "MedicalCenterId" },
                "MedicalCenters.Domain.Entities.MedicalCenter",
                new[] { "Id" });
            fK_MedicalWard_MedicalCenter_MedicalCenterId.MappedForeignKeys.Add(fK_MedicalWard_MedicalCenter_MedicalCenterIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MedicalWard_MedicalCenter_MedicalCenterIdFk).Add(fK_MedicalWard_MedicalCenter_MedicalCenterId);
            medicalWardTable.ForeignKeyConstraints.Add(fK_MedicalWard_MedicalCenter_MedicalCenterId);
            medicalCenterTable.ReferencingForeignKeyConstraints.Add(fK_MedicalWard_MedicalCenter_MedicalCenterId);
            var fK_MedicalWard_MedicalWardType_TypeId = new ForeignKeyConstraint(
                "FK_MedicalWard_MedicalWardType_TypeId", medicalWardTable, medicalWardTypeTable,
                new[] { typeIdColumn0 },
                medicalWardTypeTable.FindUniqueConstraint("PK_MedicalWardType")!, ReferentialAction.Cascade);
            var fK_MedicalWard_MedicalWardType_TypeIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.MedicalWard",
                new[] { "TypeId" },
                "MedicalCenters.Domain.Entities.MedicalCenter_Parts.MedicalWardType",
                new[] { "Id" });
            fK_MedicalWard_MedicalWardType_TypeId.MappedForeignKeys.Add(fK_MedicalWard_MedicalWardType_TypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MedicalWard_MedicalWardType_TypeIdFk).Add(fK_MedicalWard_MedicalWardType_TypeId);
            medicalWardTable.ForeignKeyConstraints.Add(fK_MedicalWard_MedicalWardType_TypeId);
            medicalWardTypeTable.ReferencingForeignKeyConstraints.Add(fK_MedicalWard_MedicalWardType_TypeId);
            var fK_Medicine_MedicineType_TypeId = new ForeignKeyConstraint(
                "FK_Medicine_MedicineType_TypeId", medicineTable, medicineTypeTable,
                new[] { typeIdColumn1 },
                medicineTypeTable.FindUniqueConstraint("PK_MedicineType")!, ReferentialAction.Cascade);
            var fK_Medicine_MedicineType_TypeIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Medicines.Medicine",
                new[] { "TypeId" },
                "MedicalCenters.Domain.Entities.Medicines.MedicineType",
                new[] { "Id" });
            fK_Medicine_MedicineType_TypeId.MappedForeignKeys.Add(fK_Medicine_MedicineType_TypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Medicine_MedicineType_TypeIdFk).Add(fK_Medicine_MedicineType_TypeId);
            medicineTable.ForeignKeyConstraints.Add(fK_Medicine_MedicineType_TypeId);
            medicineTypeTable.ReferencingForeignKeyConstraints.Add(fK_Medicine_MedicineType_TypeId);
            var fK_Medicine_Operation_Medicine_MedicineId = new ForeignKeyConstraint(
                "FK_Medicine_Operation_Medicine_MedicineId", medicine_OperationTable, medicineTable,
                new[] { medicineIdColumn },
                medicineTable.FindUniqueConstraint("PK_Medicine")!, ReferentialAction.Cascade);
            var fK_Medicine_Operation_Medicine_MedicineIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation",
                new[] { "MedicineId" },
                "MedicalCenters.Domain.Entities.Medicines.Medicine",
                new[] { "Id" });
            fK_Medicine_Operation_Medicine_MedicineId.MappedForeignKeys.Add(fK_Medicine_Operation_Medicine_MedicineIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Medicine_Operation_Medicine_MedicineIdFk).Add(fK_Medicine_Operation_Medicine_MedicineId);
            medicine_OperationTable.ForeignKeyConstraints.Add(fK_Medicine_Operation_Medicine_MedicineId);
            medicineTable.ReferencingForeignKeyConstraints.Add(fK_Medicine_Operation_Medicine_MedicineId);
            var fK_Medicine_Operation_Operation_OperationId = new ForeignKeyConstraint(
                "FK_Medicine_Operation_Operation_OperationId", medicine_OperationTable, operationTable,
                new[] { operationIdColumn0 },
                operationTable.FindUniqueConstraint("PK_Operation")!, ReferentialAction.Cascade);
            var fK_Medicine_Operation_Operation_OperationIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_Operation",
                new[] { "OperationId" },
                "MedicalCenters.Domain.Entities.Oprerations.Operation",
                new[] { "Id" });
            fK_Medicine_Operation_Operation_OperationId.MappedForeignKeys.Add(fK_Medicine_Operation_Operation_OperationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Medicine_Operation_Operation_OperationIdFk).Add(fK_Medicine_Operation_Operation_OperationId);
            medicine_OperationTable.ForeignKeyConstraints.Add(fK_Medicine_Operation_Operation_OperationId);
            operationTable.ReferencingForeignKeyConstraints.Add(fK_Medicine_Operation_Operation_OperationId);
            var fK_Medicine_PatientHistory_Medicine_MedicineId = new ForeignKeyConstraint(
                "FK_Medicine_PatientHistory_Medicine_MedicineId", medicine_PatientHistoryTable, medicineTable,
                new[] { medicineIdColumn0 },
                medicineTable.FindUniqueConstraint("PK_Medicine")!, ReferentialAction.Cascade);
            var fK_Medicine_PatientHistory_Medicine_MedicineIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory",
                new[] { "MedicineId" },
                "MedicalCenters.Domain.Entities.Medicines.Medicine",
                new[] { "Id" });
            fK_Medicine_PatientHistory_Medicine_MedicineId.MappedForeignKeys.Add(fK_Medicine_PatientHistory_Medicine_MedicineIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Medicine_PatientHistory_Medicine_MedicineIdFk).Add(fK_Medicine_PatientHistory_Medicine_MedicineId);
            medicine_PatientHistoryTable.ForeignKeyConstraints.Add(fK_Medicine_PatientHistory_Medicine_MedicineId);
            medicineTable.ReferencingForeignKeyConstraints.Add(fK_Medicine_PatientHistory_Medicine_MedicineId);
            var fK_Medicine_PatientHistory_PatientHistory_PatientHistoryId = new ForeignKeyConstraint(
                "FK_Medicine_PatientHistory_PatientHistory_PatientHistoryId", medicine_PatientHistoryTable, patientHistoryTable,
                new[] { patientHistoryIdColumn },
                patientHistoryTable.FindUniqueConstraint("PK_PatientHistory")!, ReferentialAction.Cascade);
            var fK_Medicine_PatientHistory_PatientHistory_PatientHistoryIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.IntermediateEntities.Medicine_PatientHistory",
                new[] { "PatientHistoryId" },
                "MedicalCenters.Domain.Entities.PatientHistory",
                new[] { "Id" });
            fK_Medicine_PatientHistory_PatientHistory_PatientHistoryId.MappedForeignKeys.Add(fK_Medicine_PatientHistory_PatientHistory_PatientHistoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Medicine_PatientHistory_PatientHistory_PatientHistoryIdFk).Add(fK_Medicine_PatientHistory_PatientHistory_PatientHistoryId);
            medicine_PatientHistoryTable.ForeignKeyConstraints.Add(fK_Medicine_PatientHistory_PatientHistory_PatientHistoryId);
            patientHistoryTable.ReferencingForeignKeyConstraints.Add(fK_Medicine_PatientHistory_PatientHistory_PatientHistoryId);
            var fK_Nurse_Personnel_Id = new ForeignKeyConstraint(
                "FK_Nurse_Personnel_Id", nurseTable, personnelTable,
                new[] { idColumn13 },
                personnelTable.FindUniqueConstraint("PK_Personnel")!, ReferentialAction.Cascade);
            var fK_Nurse_Personnel_IdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Persons.Staffs.Nurse",
                new[] { "Id" },
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            fK_Nurse_Personnel_Id.MappedForeignKeys.Add(fK_Nurse_Personnel_IdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Nurse_Personnel_IdFk).Add(fK_Nurse_Personnel_Id);
            nurseTable.ForeignKeyConstraints.Add(fK_Nurse_Personnel_Id);
            personnelTable.ReferencingForeignKeyConstraints.Add(fK_Nurse_Personnel_Id);
            var fK_Operation_OperationType_OperationTypeId = new ForeignKeyConstraint(
                "FK_Operation_OperationType_OperationTypeId", operationTable, operationTypeTable,
                new[] { operationTypeIdColumn },
                operationTypeTable.FindUniqueConstraint("PK_OperationType")!, ReferentialAction.Cascade);
            var fK_Operation_OperationType_OperationTypeIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Oprerations.Operation",
                new[] { "OperationTypeId" },
                "MedicalCenters.Domain.Entities.Oprerations.OperationType",
                new[] { "Id" });
            fK_Operation_OperationType_OperationTypeId.MappedForeignKeys.Add(fK_Operation_OperationType_OperationTypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Operation_OperationType_OperationTypeIdFk).Add(fK_Operation_OperationType_OperationTypeId);
            operationTable.ForeignKeyConstraints.Add(fK_Operation_OperationType_OperationTypeId);
            operationTypeTable.ReferencingForeignKeyConstraints.Add(fK_Operation_OperationType_OperationTypeId);
            var fK_PatientHistory_Doctor_DoctorId = new ForeignKeyConstraint(
                "FK_PatientHistory_Doctor_DoctorId", patientHistoryTable, doctorTable,
                new[] { doctorIdColumn2 },
                doctorTable.FindUniqueConstraint("PK_Doctor")!, ReferentialAction.Cascade);
            var fK_PatientHistory_Doctor_DoctorIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.PatientHistory",
                new[] { "DoctorId" },
                "MedicalCenters.Domain.Entities.Persons.Staffs.Doctor",
                new[] { "Id" });
            fK_PatientHistory_Doctor_DoctorId.MappedForeignKeys.Add(fK_PatientHistory_Doctor_DoctorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PatientHistory_Doctor_DoctorIdFk).Add(fK_PatientHistory_Doctor_DoctorId);
            patientHistoryTable.ForeignKeyConstraints.Add(fK_PatientHistory_Doctor_DoctorId);
            doctorTable.ReferencingForeignKeyConstraints.Add(fK_PatientHistory_Doctor_DoctorId);
            var fK_PatientHistory_Patient_PatientId = new ForeignKeyConstraint(
                "FK_PatientHistory_Patient_PatientId", patientHistoryTable, patientTable,
                new[] { patientIdColumn0 },
                patientTable.FindUniqueConstraint("PK_Patient")!, ReferentialAction.Cascade);
            var fK_PatientHistory_Patient_PatientIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.PatientHistory",
                new[] { "PatientId" },
                "MedicalCenters.Domain.Entities.Persons.Patient",
                new[] { "Id" });
            fK_PatientHistory_Patient_PatientId.MappedForeignKeys.Add(fK_PatientHistory_Patient_PatientIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PatientHistory_Patient_PatientIdFk).Add(fK_PatientHistory_Patient_PatientId);
            patientHistoryTable.ForeignKeyConstraints.Add(fK_PatientHistory_Patient_PatientId);
            patientTable.ReferencingForeignKeyConstraints.Add(fK_PatientHistory_Patient_PatientId);
            var fK_Reservation_Patient_PatientId = new ForeignKeyConstraint(
                "FK_Reservation_Patient_PatientId", reservationTable, patientTable,
                new[] { patientIdColumn1 },
                patientTable.FindUniqueConstraint("PK_Patient")!, ReferentialAction.Cascade);
            var fK_Reservation_Patient_PatientIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Reservation",
                new[] { "PatientId" },
                "MedicalCenters.Domain.Entities.Persons.Patient",
                new[] { "Id" });
            fK_Reservation_Patient_PatientId.MappedForeignKeys.Add(fK_Reservation_Patient_PatientIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reservation_Patient_PatientIdFk).Add(fK_Reservation_Patient_PatientId);
            reservationTable.ForeignKeyConstraints.Add(fK_Reservation_Patient_PatientId);
            patientTable.ReferencingForeignKeyConstraints.Add(fK_Reservation_Patient_PatientId);
            var fK_Shift_MedicalUnit_UnitId = new ForeignKeyConstraint(
                "FK_Shift_MedicalUnit_UnitId", shiftTable, medicalUnitTable,
                new[] { unitIdColumn },
                medicalUnitTable.FindUniqueConstraint("PK_MedicalUnit")!, ReferentialAction.Cascade);
            var fK_Shift_MedicalUnit_UnitIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "UnitId" },
                "MedicalCenters.Domain.Entities.MedicalUnit",
                new[] { "Id" });
            fK_Shift_MedicalUnit_UnitId.MappedForeignKeys.Add(fK_Shift_MedicalUnit_UnitIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Shift_MedicalUnit_UnitIdFk).Add(fK_Shift_MedicalUnit_UnitId);
            shiftTable.ForeignKeyConstraints.Add(fK_Shift_MedicalUnit_UnitId);
            medicalUnitTable.ReferencingForeignKeyConstraints.Add(fK_Shift_MedicalUnit_UnitId);
            var fK_Shift_Personnel_PersonnelId = new ForeignKeyConstraint(
                "FK_Shift_Personnel_PersonnelId", shiftTable, personnelTable,
                new[] { PersonnelIdColumn },
                personnelTable.FindUniqueConstraint("PK_Personnel")!, ReferentialAction.Cascade);
            var fK_Shift_Personnel_PersonnelIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "PersonnelId" },
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            fK_Shift_Personnel_PersonnelId.MappedForeignKeys.Add(fK_Shift_Personnel_PersonnelIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Shift_Personnel_PersonnelIdFk).Add(fK_Shift_Personnel_PersonnelId);
            shiftTable.ForeignKeyConstraints.Add(fK_Shift_Personnel_PersonnelId);
            personnelTable.ReferencingForeignKeyConstraints.Add(fK_Shift_Personnel_PersonnelId);
            var fK_Shift_ShiftPlan_ShiftPlanId = new ForeignKeyConstraint(
                "FK_Shift_ShiftPlan_ShiftPlanId", shiftTable, shiftPlanTable,
                new[] { shiftPlanIdColumn },
                shiftPlanTable.FindUniqueConstraint("PK_ShiftPlan")!, ReferentialAction.NoAction);
            var fK_Shift_ShiftPlan_ShiftPlanIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Shifts.Shift",
                new[] { "ShiftPlanId" },
                "MedicalCenters.Domain.Entities.Shifts.ShiftPlan",
                new[] { "Id" });
            fK_Shift_ShiftPlan_ShiftPlanId.MappedForeignKeys.Add(fK_Shift_ShiftPlan_ShiftPlanIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Shift_ShiftPlan_ShiftPlanIdFk).Add(fK_Shift_ShiftPlan_ShiftPlanId);
            shiftTable.ForeignKeyConstraints.Add(fK_Shift_ShiftPlan_ShiftPlanId);
            shiftPlanTable.ReferencingForeignKeyConstraints.Add(fK_Shift_ShiftPlan_ShiftPlanId);
            var fK_ShiftPlan_MedicalUnit_MedicalUnitId = new ForeignKeyConstraint(
                "FK_ShiftPlan_MedicalUnit_MedicalUnitId", shiftPlanTable, medicalUnitTable,
                new[] { medicalUnitIdColumn },
                medicalUnitTable.FindUniqueConstraint("PK_MedicalUnit")!, ReferentialAction.Cascade);
            var fK_ShiftPlan_MedicalUnit_MedicalUnitIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Shifts.ShiftPlan",
                new[] { "MedicalUnitId" },
                "MedicalCenters.Domain.Entities.MedicalUnit",
                new[] { "Id" });
            fK_ShiftPlan_MedicalUnit_MedicalUnitId.MappedForeignKeys.Add(fK_ShiftPlan_MedicalUnit_MedicalUnitIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ShiftPlan_MedicalUnit_MedicalUnitIdFk).Add(fK_ShiftPlan_MedicalUnit_MedicalUnitId);
            shiftPlanTable.ForeignKeyConstraints.Add(fK_ShiftPlan_MedicalUnit_MedicalUnitId);
            medicalUnitTable.ReferencingForeignKeyConstraints.Add(fK_ShiftPlan_MedicalUnit_MedicalUnitId);
            var fK_ShiftPlan_Personnel_PersonnelId = new ForeignKeyConstraint(
                "FK_ShiftPlan_Personnel_PersonnelId", shiftPlanTable, personnelTable,
                new[] { PersonnelIdColumn0 },
                personnelTable.FindUniqueConstraint("PK_Personnel")!, ReferentialAction.Cascade);
            var fK_ShiftPlan_Personnel_PersonnelIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Shifts.ShiftPlan",
                new[] { "PersonnelId" },
                "MedicalCenters.Domain.Entities.Persons.Personnel",
                new[] { "Id" });
            fK_ShiftPlan_Personnel_PersonnelId.MappedForeignKeys.Add(fK_ShiftPlan_Personnel_PersonnelIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ShiftPlan_Personnel_PersonnelIdFk).Add(fK_ShiftPlan_Personnel_PersonnelId);
            shiftPlanTable.ForeignKeyConstraints.Add(fK_ShiftPlan_Personnel_PersonnelId);
            personnelTable.ReferencingForeignKeyConstraints.Add(fK_ShiftPlan_Personnel_PersonnelId);
            var fK_Specialty_SpecialtyGroup_SpecialtyGroupId = new ForeignKeyConstraint(
                "FK_Specialty_SpecialtyGroup_SpecialtyGroupId", specialtyTable, specialtyGroupTable,
                new[] { specialtyGroupIdColumn },
                specialtyGroupTable.FindUniqueConstraint("PK_SpecialtyGroup")!, ReferentialAction.Cascade);
            var fK_Specialty_SpecialtyGroup_SpecialtyGroupIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Specialties.Specialty",
                new[] { "SpecialtyGroupId" },
                "MedicalCenters.Domain.Entities.Specialties.SpecialtyGroup",
                new[] { "Id" });
            fK_Specialty_SpecialtyGroup_SpecialtyGroupId.MappedForeignKeys.Add(fK_Specialty_SpecialtyGroup_SpecialtyGroupIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Specialty_SpecialtyGroup_SpecialtyGroupIdFk).Add(fK_Specialty_SpecialtyGroup_SpecialtyGroupId);
            specialtyTable.ForeignKeyConstraints.Add(fK_Specialty_SpecialtyGroup_SpecialtyGroupId);
            specialtyGroupTable.ReferencingForeignKeyConstraints.Add(fK_Specialty_SpecialtyGroup_SpecialtyGroupId);
            var fK_Visit_Patient_PatientId = new ForeignKeyConstraint(
                "FK_Visit_Patient_PatientId", visitTable, patientTable,
                new[] { patientIdColumn2 },
                patientTable.FindUniqueConstraint("PK_Patient")!, ReferentialAction.Cascade);
            var fK_Visit_Patient_PatientIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Visit",
                new[] { "PatientId" },
                "MedicalCenters.Domain.Entities.Persons.Patient",
                new[] { "Id" });
            fK_Visit_Patient_PatientId.MappedForeignKeys.Add(fK_Visit_Patient_PatientIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Visit_Patient_PatientIdFk).Add(fK_Visit_Patient_PatientId);
            visitTable.ForeignKeyConstraints.Add(fK_Visit_Patient_PatientId);
            patientTable.ReferencingForeignKeyConstraints.Add(fK_Visit_Patient_PatientId);
            var fK_Visit_Reservation_ReservationId = new ForeignKeyConstraint(
                "FK_Visit_Reservation_ReservationId", visitTable, reservationTable,
                new[] { reservationIdColumn },
                reservationTable.FindUniqueConstraint("PK_Reservation")!, ReferentialAction.NoAction);
            var fK_Visit_Reservation_ReservationIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Domain.Entities.Visit",
                new[] { "ReservationId" },
                "MedicalCenters.Domain.Entities.Reservation",
                new[] { "Id" });
            fK_Visit_Reservation_ReservationId.MappedForeignKeys.Add(fK_Visit_Reservation_ReservationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Visit_Reservation_ReservationIdFk).Add(fK_Visit_Reservation_ReservationId);
            visitTable.ForeignKeyConstraints.Add(fK_Visit_Reservation_ReservationId);
            reservationTable.ReferencingForeignKeyConstraints.Add(fK_Visit_Reservation_ReservationId);
            return relationalModel.MakeReadOnly();
        }
    }
}
