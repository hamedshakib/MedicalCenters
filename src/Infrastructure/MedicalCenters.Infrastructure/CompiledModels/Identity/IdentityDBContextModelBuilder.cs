// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MedicalCenters.Persistence.CompiledModels.Identity
{
    public partial class IdentityDBContextModel
    {
        partial void Initialize()
        {
            var permission = PermissionEntityType.Create(this);
            var permissionGroup = PermissionGroupEntityType.Create(this);
            var permissionGroup_User = PermissionGroup_UserEntityType.Create(this);
            var permission_PermissionGroup = Permission_PermissionGroupEntityType.Create(this);
            var permission_User = Permission_UserEntityType.Create(this);
            var user = UserEntityType.Create(this);

            PermissionGroup_UserEntityType.CreateForeignKey1(permissionGroup_User, permissionGroup);
            PermissionGroup_UserEntityType.CreateForeignKey2(permissionGroup_User, user);
            Permission_PermissionGroupEntityType.CreateForeignKey1(permission_PermissionGroup, permissionGroup);
            Permission_PermissionGroupEntityType.CreateForeignKey2(permission_PermissionGroup, permission);
            Permission_UserEntityType.CreateForeignKey1(permission_User, permission);
            Permission_UserEntityType.CreateForeignKey2(permission_User, user);

            PermissionEntityType.CreateAnnotations(permission);
            PermissionGroupEntityType.CreateAnnotations(permissionGroup);
            PermissionGroup_UserEntityType.CreateAnnotations(permissionGroup_User);
            Permission_PermissionGroupEntityType.CreateAnnotations(permission_PermissionGroup);
            Permission_UserEntityType.CreateAnnotations(permission_User);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("ProductVersion", "8.0.6");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var permission = FindEntityType("MedicalCenters.Identity.Models.Domains.Permission")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            permission.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var medicalCentersIdentityModelsDomainsPermissionTableBase = new TableBase("MedicalCenters.Identity.Models.Domains.Permission", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", medicalCentersIdentityModelsDomainsPermissionTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsPermissionTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersIdentityModelsDomainsPermissionTableBase);
            medicalCentersIdentityModelsDomainsPermissionTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersIdentityModelsDomainsPermissionTableBase);
            medicalCentersIdentityModelsDomainsPermissionTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersIdentityModelsDomainsPermissionTableBase);
            medicalCentersIdentityModelsDomainsPermissionTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(150)", medicalCentersIdentityModelsDomainsPermissionTableBase);
            medicalCentersIdentityModelsDomainsPermissionTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Identity.Models.Domains.Permission", medicalCentersIdentityModelsDomainsPermissionTableBase);
            var medicalCentersIdentityModelsDomainsPermissionMappingBase = new TableMappingBase<ColumnMappingBase>(permission, medicalCentersIdentityModelsDomainsPermissionTableBase, true);
            medicalCentersIdentityModelsDomainsPermissionTableBase.AddTypeMapping(medicalCentersIdentityModelsDomainsPermissionMappingBase, false);
            defaultTableMappings.Add(medicalCentersIdentityModelsDomainsPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, permission.FindProperty("Id")!, medicalCentersIdentityModelsDomainsPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, permission.FindProperty("CreatedAt")!, medicalCentersIdentityModelsDomainsPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, permission.FindProperty("CreatedBy")!, medicalCentersIdentityModelsDomainsPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, permission.FindProperty("Description")!, medicalCentersIdentityModelsDomainsPermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, permission.FindProperty("Name")!, medicalCentersIdentityModelsDomainsPermissionMappingBase);

            var tableMappings = new List<TableMapping>();
            permission.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var permissionTable = new Table("Permission", null, relationalModel);
            var idColumn = new Column("Id", "int", permissionTable);
            permissionTable.Columns.Add("Id", idColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", permissionTable)
            {
                IsNullable = true
            };
            permissionTable.Columns.Add("CreatedAt", createdAtColumn);
            var createdByColumn = new Column("CreatedBy", "bigint", permissionTable);
            permissionTable.Columns.Add("CreatedBy", createdByColumn);
            var descriptionColumn = new Column("Description", "nvarchar(1000)", permissionTable);
            permissionTable.Columns.Add("Description", descriptionColumn);
            var nameColumn = new Column("Name", "nvarchar(150)", permissionTable);
            permissionTable.Columns.Add("Name", nameColumn);
            var pK_Permission = new UniqueConstraint("PK_Permission", permissionTable, new[] { idColumn });
            permissionTable.PrimaryKey = pK_Permission;
            var pK_PermissionUc = RelationalModel.GetKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission",
                new[] { "Id" });
            pK_Permission.MappedKeys.Add(pK_PermissionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PermissionUc).Add(pK_Permission);
            permissionTable.UniqueConstraints.Add("PK_Permission", pK_Permission);
            relationalModel.Tables.Add(("Permission", null), permissionTable);
            var permissionTableMapping = new TableMapping(permission, permissionTable, true);
            permissionTable.AddTypeMapping(permissionTableMapping, false);
            tableMappings.Add(permissionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, permission.FindProperty("Id")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, permission.FindProperty("CreatedAt")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, permission.FindProperty("CreatedBy")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, permission.FindProperty("Description")!, permissionTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, permission.FindProperty("Name")!, permissionTableMapping);

            var permissionGroup = FindEntityType("MedicalCenters.Identity.Models.Domains.PermissionGroup")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            permissionGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var medicalCentersIdentityModelsDomainsPermissionGroupTableBase = new TableBase("MedicalCenters.Identity.Models.Domains.PermissionGroup", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", medicalCentersIdentityModelsDomainsPermissionGroupTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersIdentityModelsDomainsPermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(1000)", medicalCentersIdentityModelsDomainsPermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("Description", descriptionColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", medicalCentersIdentityModelsDomainsPermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("Id", idColumnBase0);
            var modifiedAtColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", medicalCentersIdentityModelsDomainsPermissionGroupTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase);
            var modifiedByColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedBy", "bigint", medicalCentersIdentityModelsDomainsPermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(150)", medicalCentersIdentityModelsDomainsPermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("MedicalCenters.Identity.Models.Domains.PermissionGroup", medicalCentersIdentityModelsDomainsPermissionGroupTableBase);
            var medicalCentersIdentityModelsDomainsPermissionGroupMappingBase = new TableMappingBase<ColumnMappingBase>(permissionGroup, medicalCentersIdentityModelsDomainsPermissionGroupTableBase, true);
            medicalCentersIdentityModelsDomainsPermissionGroupTableBase.AddTypeMapping(medicalCentersIdentityModelsDomainsPermissionGroupMappingBase, false);
            defaultTableMappings0.Add(medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, permissionGroup.FindProperty("Id")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, permissionGroup.FindProperty("CreatedAt")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, permissionGroup.FindProperty("CreatedBy")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, permissionGroup.FindProperty("Description")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase, permissionGroup.FindProperty("ModifiedAt")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase, permissionGroup.FindProperty("ModifiedBy")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, permissionGroup.FindProperty("Name")!, medicalCentersIdentityModelsDomainsPermissionGroupMappingBase);

            var tableMappings0 = new List<TableMapping>();
            permissionGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var permissionGroupTable = new Table("PermissionGroup", null, relationalModel);
            var idColumn0 = new Column("Id", "int", permissionGroupTable);
            permissionGroupTable.Columns.Add("Id", idColumn0);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", permissionGroupTable)
            {
                IsNullable = true
            };
            permissionGroupTable.Columns.Add("CreatedAt", createdAtColumn0);
            var createdByColumn0 = new Column("CreatedBy", "bigint", permissionGroupTable);
            permissionGroupTable.Columns.Add("CreatedBy", createdByColumn0);
            var descriptionColumn0 = new Column("Description", "nvarchar(1000)", permissionGroupTable);
            permissionGroupTable.Columns.Add("Description", descriptionColumn0);
            var modifiedAtColumn = new Column("ModifiedAt", "datetime2", permissionGroupTable)
            {
                IsNullable = true
            };
            permissionGroupTable.Columns.Add("ModifiedAt", modifiedAtColumn);
            var modifiedByColumn = new Column("ModifiedBy", "bigint", permissionGroupTable);
            permissionGroupTable.Columns.Add("ModifiedBy", modifiedByColumn);
            var nameColumn0 = new Column("Name", "nvarchar(150)", permissionGroupTable);
            permissionGroupTable.Columns.Add("Name", nameColumn0);
            var pK_PermissionGroup = new UniqueConstraint("PK_PermissionGroup", permissionGroupTable, new[] { idColumn0 });
            permissionGroupTable.PrimaryKey = pK_PermissionGroup;
            var pK_PermissionGroupUc = RelationalModel.GetKey(this,
                "MedicalCenters.Identity.Models.Domains.PermissionGroup",
                new[] { "Id" });
            pK_PermissionGroup.MappedKeys.Add(pK_PermissionGroupUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PermissionGroupUc).Add(pK_PermissionGroup);
            permissionGroupTable.UniqueConstraints.Add("PK_PermissionGroup", pK_PermissionGroup);
            relationalModel.Tables.Add(("PermissionGroup", null), permissionGroupTable);
            var permissionGroupTableMapping = new TableMapping(permissionGroup, permissionGroupTable, true);
            permissionGroupTable.AddTypeMapping(permissionGroupTableMapping, false);
            tableMappings0.Add(permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, permissionGroup.FindProperty("Id")!, permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, permissionGroup.FindProperty("CreatedAt")!, permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, permissionGroup.FindProperty("CreatedBy")!, permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, permissionGroup.FindProperty("Description")!, permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn, permissionGroup.FindProperty("ModifiedAt")!, permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn, permissionGroup.FindProperty("ModifiedBy")!, permissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, permissionGroup.FindProperty("Name")!, permissionGroupTableMapping);

            var permissionGroup_User = FindEntityType("MedicalCenters.Identity.Models.Domains.PermissionGroup_User")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            permissionGroup_User.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase = new TableBase("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", null, relationalModel);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var createdByColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase.Columns.Add("CreatedBy", createdByColumnBase1);
            var permissionGroupIdColumnBase = new ColumnBase<ColumnMappingBase>("PermissionGroupId", "int", medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase.Columns.Add("PermissionGroupId", permissionGroupIdColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "bigint", medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase);
            medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Identity.Models.Domains.PermissionGroup_User", medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase);
            var medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase = new TableMappingBase<ColumnMappingBase>(permissionGroup_User, medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase, true);
            medicalCentersIdentityModelsDomainsPermissionGroup_UserTableBase.AddTypeMapping(medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase, false);
            defaultTableMappings1.Add(medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionGroupIdColumnBase, permissionGroup_User.FindProperty("PermissionGroupId")!, medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, permissionGroup_User.FindProperty("UserId")!, medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, permissionGroup_User.FindProperty("CreatedAt")!, medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase1, permissionGroup_User.FindProperty("CreatedBy")!, medicalCentersIdentityModelsDomainsPermissionGroup_UserMappingBase);

            var tableMappings1 = new List<TableMapping>();
            permissionGroup_User.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var permissionGroup_UserTable = new Table("PermissionGroup_User", null, relationalModel);
            var permissionGroupIdColumn = new Column("PermissionGroupId", "int", permissionGroup_UserTable);
            permissionGroup_UserTable.Columns.Add("PermissionGroupId", permissionGroupIdColumn);
            var userIdColumn = new Column("UserId", "bigint", permissionGroup_UserTable);
            permissionGroup_UserTable.Columns.Add("UserId", userIdColumn);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", permissionGroup_UserTable)
            {
                IsNullable = true
            };
            permissionGroup_UserTable.Columns.Add("CreatedAt", createdAtColumn1);
            var createdByColumn1 = new Column("CreatedBy", "bigint", permissionGroup_UserTable);
            permissionGroup_UserTable.Columns.Add("CreatedBy", createdByColumn1);
            var pK_PermissionGroup_User = new UniqueConstraint("PK_PermissionGroup_User", permissionGroup_UserTable, new[] { permissionGroupIdColumn, userIdColumn });
            permissionGroup_UserTable.PrimaryKey = pK_PermissionGroup_User;
            var pK_PermissionGroup_UserUc = RelationalModel.GetKey(this,
                "MedicalCenters.Identity.Models.Domains.PermissionGroup_User",
                new[] { "PermissionGroupId", "UserId" });
            pK_PermissionGroup_User.MappedKeys.Add(pK_PermissionGroup_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PermissionGroup_UserUc).Add(pK_PermissionGroup_User);
            permissionGroup_UserTable.UniqueConstraints.Add("PK_PermissionGroup_User", pK_PermissionGroup_User);
            var iX_PermissionGroup_User_UserId = new TableIndex(
            "IX_PermissionGroup_User_UserId", permissionGroup_UserTable, new[] { userIdColumn }, false);
            var iX_PermissionGroup_User_UserIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Identity.Models.Domains.PermissionGroup_User",
                new[] { "UserId" });
            iX_PermissionGroup_User_UserId.MappedIndexes.Add(iX_PermissionGroup_User_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PermissionGroup_User_UserIdIx).Add(iX_PermissionGroup_User_UserId);
            permissionGroup_UserTable.Indexes.Add("IX_PermissionGroup_User_UserId", iX_PermissionGroup_User_UserId);
            relationalModel.Tables.Add(("PermissionGroup_User", null), permissionGroup_UserTable);
            var permissionGroup_UserTableMapping = new TableMapping(permissionGroup_User, permissionGroup_UserTable, true);
            permissionGroup_UserTable.AddTypeMapping(permissionGroup_UserTableMapping, false);
            tableMappings1.Add(permissionGroup_UserTableMapping);
            RelationalModel.CreateColumnMapping(permissionGroupIdColumn, permissionGroup_User.FindProperty("PermissionGroupId")!, permissionGroup_UserTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, permissionGroup_User.FindProperty("UserId")!, permissionGroup_UserTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, permissionGroup_User.FindProperty("CreatedAt")!, permissionGroup_UserTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn1, permissionGroup_User.FindProperty("CreatedBy")!, permissionGroup_UserTableMapping);

            var permission_PermissionGroup = FindEntityType("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            permission_PermissionGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase = new TableBase("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", null, relationalModel);
            var createdAtColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase.Columns.Add("CreatedAt", createdAtColumnBase2);
            var createdByColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase.Columns.Add("CreatedBy", createdByColumnBase2);
            var permissionGroupIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PermissionGroupId", "int", medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase.Columns.Add("PermissionGroupId", permissionGroupIdColumnBase0);
            var permissionIdColumnBase = new ColumnBase<ColumnMappingBase>("PermissionId", "int", medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase);
            medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase.Columns.Add("PermissionId", permissionIdColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup", medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase);
            var medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase = new TableMappingBase<ColumnMappingBase>(permission_PermissionGroup, medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase, true);
            medicalCentersIdentityModelsDomainsPermission_PermissionGroupTableBase.AddTypeMapping(medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase, false);
            defaultTableMappings2.Add(medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionGroupIdColumnBase0, permission_PermissionGroup.FindProperty("PermissionGroupId")!, medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionIdColumnBase, permission_PermissionGroup.FindProperty("PermissionId")!, medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase2, permission_PermissionGroup.FindProperty("CreatedAt")!, medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase2, permission_PermissionGroup.FindProperty("CreatedBy")!, medicalCentersIdentityModelsDomainsPermission_PermissionGroupMappingBase);

            var tableMappings2 = new List<TableMapping>();
            permission_PermissionGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var permission_PermissionGroupTable = new Table("Permission_PermissionGroup", null, relationalModel);
            var permissionIdColumn = new Column("PermissionId", "int", permission_PermissionGroupTable);
            permission_PermissionGroupTable.Columns.Add("PermissionId", permissionIdColumn);
            var permissionGroupIdColumn0 = new Column("PermissionGroupId", "int", permission_PermissionGroupTable);
            permission_PermissionGroupTable.Columns.Add("PermissionGroupId", permissionGroupIdColumn0);
            var createdAtColumn2 = new Column("CreatedAt", "datetime2", permission_PermissionGroupTable)
            {
                IsNullable = true
            };
            permission_PermissionGroupTable.Columns.Add("CreatedAt", createdAtColumn2);
            var createdByColumn2 = new Column("CreatedBy", "bigint", permission_PermissionGroupTable);
            permission_PermissionGroupTable.Columns.Add("CreatedBy", createdByColumn2);
            var pK_Permission_PermissionGroup = new UniqueConstraint("PK_Permission_PermissionGroup", permission_PermissionGroupTable, new[] { permissionIdColumn, permissionGroupIdColumn0 });
            permission_PermissionGroupTable.PrimaryKey = pK_Permission_PermissionGroup;
            var pK_Permission_PermissionGroupUc = RelationalModel.GetKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup",
                new[] { "PermissionId", "PermissionGroupId" });
            pK_Permission_PermissionGroup.MappedKeys.Add(pK_Permission_PermissionGroupUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Permission_PermissionGroupUc).Add(pK_Permission_PermissionGroup);
            permission_PermissionGroupTable.UniqueConstraints.Add("PK_Permission_PermissionGroup", pK_Permission_PermissionGroup);
            var iX_Permission_PermissionGroup_PermissionGroupId = new TableIndex(
            "IX_Permission_PermissionGroup_PermissionGroupId", permission_PermissionGroupTable, new[] { permissionGroupIdColumn0 }, false);
            var iX_Permission_PermissionGroup_PermissionGroupIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup",
                new[] { "PermissionGroupId" });
            iX_Permission_PermissionGroup_PermissionGroupId.MappedIndexes.Add(iX_Permission_PermissionGroup_PermissionGroupIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Permission_PermissionGroup_PermissionGroupIdIx).Add(iX_Permission_PermissionGroup_PermissionGroupId);
            permission_PermissionGroupTable.Indexes.Add("IX_Permission_PermissionGroup_PermissionGroupId", iX_Permission_PermissionGroup_PermissionGroupId);
            relationalModel.Tables.Add(("Permission_PermissionGroup", null), permission_PermissionGroupTable);
            var permission_PermissionGroupTableMapping = new TableMapping(permission_PermissionGroup, permission_PermissionGroupTable, true);
            permission_PermissionGroupTable.AddTypeMapping(permission_PermissionGroupTableMapping, false);
            tableMappings2.Add(permission_PermissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(permissionGroupIdColumn0, permission_PermissionGroup.FindProperty("PermissionGroupId")!, permission_PermissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(permissionIdColumn, permission_PermissionGroup.FindProperty("PermissionId")!, permission_PermissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn2, permission_PermissionGroup.FindProperty("CreatedAt")!, permission_PermissionGroupTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn2, permission_PermissionGroup.FindProperty("CreatedBy")!, permission_PermissionGroupTableMapping);

            var permission_User = FindEntityType("MedicalCenters.Identity.Models.Domains.Permission_User")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            permission_User.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var medicalCentersIdentityModelsDomainsPermission_UserTableBase = new TableBase("MedicalCenters.Identity.Models.Domains.Permission_User", null, relationalModel);
            var createdAtColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", medicalCentersIdentityModelsDomainsPermission_UserTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsPermission_UserTableBase.Columns.Add("CreatedAt", createdAtColumnBase3);
            var createdByColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersIdentityModelsDomainsPermission_UserTableBase);
            medicalCentersIdentityModelsDomainsPermission_UserTableBase.Columns.Add("CreatedBy", createdByColumnBase3);
            var permissionIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PermissionId", "int", medicalCentersIdentityModelsDomainsPermission_UserTableBase);
            medicalCentersIdentityModelsDomainsPermission_UserTableBase.Columns.Add("PermissionId", permissionIdColumnBase0);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", medicalCentersIdentityModelsDomainsPermission_UserTableBase);
            medicalCentersIdentityModelsDomainsPermission_UserTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("MedicalCenters.Identity.Models.Domains.Permission_User", medicalCentersIdentityModelsDomainsPermission_UserTableBase);
            var medicalCentersIdentityModelsDomainsPermission_UserMappingBase = new TableMappingBase<ColumnMappingBase>(permission_User, medicalCentersIdentityModelsDomainsPermission_UserTableBase, true);
            medicalCentersIdentityModelsDomainsPermission_UserTableBase.AddTypeMapping(medicalCentersIdentityModelsDomainsPermission_UserMappingBase, false);
            defaultTableMappings3.Add(medicalCentersIdentityModelsDomainsPermission_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionIdColumnBase0, permission_User.FindProperty("PermissionId")!, medicalCentersIdentityModelsDomainsPermission_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, permission_User.FindProperty("UserId")!, medicalCentersIdentityModelsDomainsPermission_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase3, permission_User.FindProperty("CreatedAt")!, medicalCentersIdentityModelsDomainsPermission_UserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase3, permission_User.FindProperty("CreatedBy")!, medicalCentersIdentityModelsDomainsPermission_UserMappingBase);

            var tableMappings3 = new List<TableMapping>();
            permission_User.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var permission_UserTable = new Table("Permission_User", null, relationalModel);
            var permissionIdColumn0 = new Column("PermissionId", "int", permission_UserTable);
            permission_UserTable.Columns.Add("PermissionId", permissionIdColumn0);
            var userIdColumn0 = new Column("UserId", "bigint", permission_UserTable);
            permission_UserTable.Columns.Add("UserId", userIdColumn0);
            var createdAtColumn3 = new Column("CreatedAt", "datetime2", permission_UserTable)
            {
                IsNullable = true
            };
            permission_UserTable.Columns.Add("CreatedAt", createdAtColumn3);
            var createdByColumn3 = new Column("CreatedBy", "bigint", permission_UserTable);
            permission_UserTable.Columns.Add("CreatedBy", createdByColumn3);
            var pK_Permission_User = new UniqueConstraint("PK_Permission_User", permission_UserTable, new[] { permissionIdColumn0, userIdColumn0 });
            permission_UserTable.PrimaryKey = pK_Permission_User;
            var pK_Permission_UserUc = RelationalModel.GetKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission_User",
                new[] { "PermissionId", "UserId" });
            pK_Permission_User.MappedKeys.Add(pK_Permission_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Permission_UserUc).Add(pK_Permission_User);
            permission_UserTable.UniqueConstraints.Add("PK_Permission_User", pK_Permission_User);
            var iX_Permission_User_UserId = new TableIndex(
            "IX_Permission_User_UserId", permission_UserTable, new[] { userIdColumn0 }, false);
            var iX_Permission_User_UserIdIx = RelationalModel.GetIndex(this,
                "MedicalCenters.Identity.Models.Domains.Permission_User",
                new[] { "UserId" });
            iX_Permission_User_UserId.MappedIndexes.Add(iX_Permission_User_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Permission_User_UserIdIx).Add(iX_Permission_User_UserId);
            permission_UserTable.Indexes.Add("IX_Permission_User_UserId", iX_Permission_User_UserId);
            relationalModel.Tables.Add(("Permission_User", null), permission_UserTable);
            var permission_UserTableMapping = new TableMapping(permission_User, permission_UserTable, true);
            permission_UserTable.AddTypeMapping(permission_UserTableMapping, false);
            tableMappings3.Add(permission_UserTableMapping);
            RelationalModel.CreateColumnMapping(permissionIdColumn0, permission_User.FindProperty("PermissionId")!, permission_UserTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, permission_User.FindProperty("UserId")!, permission_UserTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn3, permission_User.FindProperty("CreatedAt")!, permission_UserTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn3, permission_User.FindProperty("CreatedBy")!, permission_UserTableMapping);

            var user = FindEntityType("MedicalCenters.Identity.Models.Domains.User")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var medicalCentersIdentityModelsDomainsUserTableBase = new TableBase("MedicalCenters.Identity.Models.Domains.User", null, relationalModel);
            var createdAtColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", medicalCentersIdentityModelsDomainsUserTableBase)
            {
                IsNullable = true
            };
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("CreatedAt", createdAtColumnBase4);
            var createdByColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedBy", "bigint", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("CreatedBy", createdByColumnBase4);
            var hashAlgorithmTypeColumnBase = new ColumnBase<ColumnMappingBase>("HashAlgorithmType", "int", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("HashAlgorithmType", hashAlgorithmTypeColumnBase);
            var hashedPasswordColumnBase = new ColumnBase<ColumnMappingBase>("HashedPassword", "varbinary(max)", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("HashedPassword", hashedPasswordColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "bigint", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(150)", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("Name", nameColumnBase1);
            var peaperTypeColumnBase = new ColumnBase<ColumnMappingBase>("PeaperType", "int", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("PeaperType", peaperTypeColumnBase);
            var saltColumnBase = new ColumnBase<ColumnMappingBase>("Salt", "varbinary(max)", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("Salt", saltColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "nvarchar(100)", medicalCentersIdentityModelsDomainsUserTableBase);
            medicalCentersIdentityModelsDomainsUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("MedicalCenters.Identity.Models.Domains.User", medicalCentersIdentityModelsDomainsUserTableBase);
            var medicalCentersIdentityModelsDomainsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, medicalCentersIdentityModelsDomainsUserTableBase, true);
            medicalCentersIdentityModelsDomainsUserTableBase.AddTypeMapping(medicalCentersIdentityModelsDomainsUserMappingBase, false);
            defaultTableMappings4.Add(medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, user.FindProperty("Id")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase4, user.FindProperty("CreatedAt")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase4, user.FindProperty("CreatedBy")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashAlgorithmTypeColumnBase, user.FindProperty("HashAlgorithmType")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashedPasswordColumnBase, user.FindProperty("HashedPassword")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, user.FindProperty("Name")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peaperTypeColumnBase, user.FindProperty("PeaperType")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)saltColumnBase, user.FindProperty("Salt")!, medicalCentersIdentityModelsDomainsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, user.FindProperty("UserName")!, medicalCentersIdentityModelsDomainsUserMappingBase);

            var tableMappings4 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var userTable = new Table("User", null, relationalModel);
            var idColumn1 = new Column("Id", "bigint", userTable);
            userTable.Columns.Add("Id", idColumn1);
            var createdAtColumn4 = new Column("CreatedAt", "datetime2", userTable)
            {
                IsNullable = true
            };
            userTable.Columns.Add("CreatedAt", createdAtColumn4);
            var createdByColumn4 = new Column("CreatedBy", "bigint", userTable);
            userTable.Columns.Add("CreatedBy", createdByColumn4);
            var hashAlgorithmTypeColumn = new Column("HashAlgorithmType", "int", userTable);
            userTable.Columns.Add("HashAlgorithmType", hashAlgorithmTypeColumn);
            var hashedPasswordColumn = new Column("HashedPassword", "varbinary(max)", userTable);
            userTable.Columns.Add("HashedPassword", hashedPasswordColumn);
            var nameColumn1 = new Column("Name", "nvarchar(150)", userTable);
            userTable.Columns.Add("Name", nameColumn1);
            var peaperTypeColumn = new Column("PeaperType", "int", userTable);
            userTable.Columns.Add("PeaperType", peaperTypeColumn);
            var saltColumn = new Column("Salt", "varbinary(max)", userTable);
            userTable.Columns.Add("Salt", saltColumn);
            var userNameColumn = new Column("UserName", "nvarchar(100)", userTable);
            userTable.Columns.Add("UserName", userNameColumn);
            var pK_User = new UniqueConstraint("PK_User", userTable, new[] { idColumn1 });
            userTable.PrimaryKey = pK_User;
            var pK_UserUc = RelationalModel.GetKey(this,
                "MedicalCenters.Identity.Models.Domains.User",
                new[] { "Id" });
            pK_User.MappedKeys.Add(pK_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserUc).Add(pK_User);
            userTable.UniqueConstraints.Add("PK_User", pK_User);
            relationalModel.Tables.Add(("User", null), userTable);
            var userTableMapping = new TableMapping(user, userTable, true);
            userTable.AddTypeMapping(userTableMapping, false);
            tableMappings4.Add(userTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, user.FindProperty("Id")!, userTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn4, user.FindProperty("CreatedAt")!, userTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn4, user.FindProperty("CreatedBy")!, userTableMapping);
            RelationalModel.CreateColumnMapping(hashAlgorithmTypeColumn, user.FindProperty("HashAlgorithmType")!, userTableMapping);
            RelationalModel.CreateColumnMapping(hashedPasswordColumn, user.FindProperty("HashedPassword")!, userTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, user.FindProperty("Name")!, userTableMapping);
            RelationalModel.CreateColumnMapping(peaperTypeColumn, user.FindProperty("PeaperType")!, userTableMapping);
            RelationalModel.CreateColumnMapping(saltColumn, user.FindProperty("Salt")!, userTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, user.FindProperty("UserName")!, userTableMapping);
            var fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupId = new ForeignKeyConstraint(
                "FK_Permission_PermissionGroup_PermissionGroup_PermissionGroupId", permission_PermissionGroupTable, permissionGroupTable,
                new[] { permissionGroupIdColumn0 },
                permissionGroupTable.FindUniqueConstraint("PK_PermissionGroup")!, ReferentialAction.Cascade);
            var fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup",
                new[] { "PermissionGroupId" },
                "MedicalCenters.Identity.Models.Domains.PermissionGroup",
                new[] { "Id" });
            fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupId.MappedForeignKeys.Add(fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupIdFk).Add(fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupId);
            permission_PermissionGroupTable.ForeignKeyConstraints.Add(fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupId);
            permissionGroupTable.ReferencingForeignKeyConstraints.Add(fK_Permission_PermissionGroup_PermissionGroup_PermissionGroupId);
            var fK_Permission_PermissionGroup_Permission_PermissionId = new ForeignKeyConstraint(
                "FK_Permission_PermissionGroup_Permission_PermissionId", permission_PermissionGroupTable, permissionTable,
                new[] { permissionIdColumn },
                permissionTable.FindUniqueConstraint("PK_Permission")!, ReferentialAction.Cascade);
            var fK_Permission_PermissionGroup_Permission_PermissionIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission_PermissionGroup",
                new[] { "PermissionId" },
                "MedicalCenters.Identity.Models.Domains.Permission",
                new[] { "Id" });
            fK_Permission_PermissionGroup_Permission_PermissionId.MappedForeignKeys.Add(fK_Permission_PermissionGroup_Permission_PermissionIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Permission_PermissionGroup_Permission_PermissionIdFk).Add(fK_Permission_PermissionGroup_Permission_PermissionId);
            permission_PermissionGroupTable.ForeignKeyConstraints.Add(fK_Permission_PermissionGroup_Permission_PermissionId);
            permissionTable.ReferencingForeignKeyConstraints.Add(fK_Permission_PermissionGroup_Permission_PermissionId);
            var fK_Permission_User_Permission_PermissionId = new ForeignKeyConstraint(
                "FK_Permission_User_Permission_PermissionId", permission_UserTable, permissionTable,
                new[] { permissionIdColumn0 },
                permissionTable.FindUniqueConstraint("PK_Permission")!, ReferentialAction.Cascade);
            var fK_Permission_User_Permission_PermissionIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission_User",
                new[] { "PermissionId" },
                "MedicalCenters.Identity.Models.Domains.Permission",
                new[] { "Id" });
            fK_Permission_User_Permission_PermissionId.MappedForeignKeys.Add(fK_Permission_User_Permission_PermissionIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Permission_User_Permission_PermissionIdFk).Add(fK_Permission_User_Permission_PermissionId);
            permission_UserTable.ForeignKeyConstraints.Add(fK_Permission_User_Permission_PermissionId);
            permissionTable.ReferencingForeignKeyConstraints.Add(fK_Permission_User_Permission_PermissionId);
            var fK_Permission_User_User_UserId = new ForeignKeyConstraint(
                "FK_Permission_User_User_UserId", permission_UserTable, userTable,
                new[] { userIdColumn0 },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_Permission_User_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Identity.Models.Domains.Permission_User",
                new[] { "UserId" },
                "MedicalCenters.Identity.Models.Domains.User",
                new[] { "Id" });
            fK_Permission_User_User_UserId.MappedForeignKeys.Add(fK_Permission_User_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Permission_User_User_UserIdFk).Add(fK_Permission_User_User_UserId);
            permission_UserTable.ForeignKeyConstraints.Add(fK_Permission_User_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_Permission_User_User_UserId);
            var fK_PermissionGroup_User_PermissionGroup_PermissionGroupId = new ForeignKeyConstraint(
                "FK_PermissionGroup_User_PermissionGroup_PermissionGroupId", permissionGroup_UserTable, permissionGroupTable,
                new[] { permissionGroupIdColumn },
                permissionGroupTable.FindUniqueConstraint("PK_PermissionGroup")!, ReferentialAction.Cascade);
            var fK_PermissionGroup_User_PermissionGroup_PermissionGroupIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Identity.Models.Domains.PermissionGroup_User",
                new[] { "PermissionGroupId" },
                "MedicalCenters.Identity.Models.Domains.PermissionGroup",
                new[] { "Id" });
            fK_PermissionGroup_User_PermissionGroup_PermissionGroupId.MappedForeignKeys.Add(fK_PermissionGroup_User_PermissionGroup_PermissionGroupIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PermissionGroup_User_PermissionGroup_PermissionGroupIdFk).Add(fK_PermissionGroup_User_PermissionGroup_PermissionGroupId);
            permissionGroup_UserTable.ForeignKeyConstraints.Add(fK_PermissionGroup_User_PermissionGroup_PermissionGroupId);
            permissionGroupTable.ReferencingForeignKeyConstraints.Add(fK_PermissionGroup_User_PermissionGroup_PermissionGroupId);
            var fK_PermissionGroup_User_User_UserId = new ForeignKeyConstraint(
                "FK_PermissionGroup_User_User_UserId", permissionGroup_UserTable, userTable,
                new[] { userIdColumn },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_PermissionGroup_User_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "MedicalCenters.Identity.Models.Domains.PermissionGroup_User",
                new[] { "UserId" },
                "MedicalCenters.Identity.Models.Domains.User",
                new[] { "Id" });
            fK_PermissionGroup_User_User_UserId.MappedForeignKeys.Add(fK_PermissionGroup_User_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PermissionGroup_User_User_UserIdFk).Add(fK_PermissionGroup_User_User_UserId);
            permissionGroup_UserTable.ForeignKeyConstraints.Add(fK_PermissionGroup_User_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_PermissionGroup_User_User_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
